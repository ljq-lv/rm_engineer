/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-05-09 11:58:03.208674
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;
x0=IKcos(j[5]);
x1=IKsin(j[3]);
x2=IKsin(j[4]);
x3=IKcos(j[3]);
x4=IKsin(j[5]);
x5=IKcos(j[4]);
x6=(x2*x3);
x7=(x1*x4);
x8=(x1*x5);
x9=(x0*x1);
x10=(x3*x5);
eerot[0]=(((x0*x3))+((x2*x7)));
eerot[1]=(((x2*x9))+(((-1.0)*x3*x4)));
eerot[2]=x8;
eetrans[0]=((0.2595)+(((-0.2165)*x8))+j[1]);
eerot[3]=(x4*x5);
eerot[4]=(x0*x5);
eerot[5]=((-1.0)*x2);
eetrans[1]=((((0.2165)*x2))+j[2]);
eerot[6]=((((-1.0)*x9))+((x4*x6)));
eerot[7]=(((x0*x6))+x7);
eerot[8]=x10;
eetrans[2]=((0.385)+(((-0.2165)*x10))+j[0]);
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((0.2165)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((0.2165)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.266)+(((0.2165)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x11=((1.0)*px);
IkReal x12=((1.0)*pz);
IkReal x13=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x13))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x12)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x11)));
rxp1_0=((((-1.0)*r21*x13))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x12)));
rxp1_2=((((-1.0)*r11*x11))+((py*r01)));
rxp2_0=((((-1.0)*r22*x13))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x12)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x11)));
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=py;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=((-0.119)+pz);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=((-0.2595)+px);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(solutions);
}
}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
new_r00=r00;
new_r01=r01;
new_r02=r02;
new_r10=((-1.0)*r20);
new_r11=((-1.0)*r21);
new_r12=((-1.0)*r22);
new_r20=r10;
new_r21=r11;
new_r22=r12;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
sj7array[0]=((-1.0)*new_r22);
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj7;
j6eval[1]=IKsign(cj7);
j6eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=cj7;
j6eval[1]=new_r02;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j8mul = 1;
j8=0;
j6mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].fmul = j6mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].fmul = j8mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j8mul = 1;
j8=0;
j6mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6=IKatan2(((-1.0)*new_r01), new_r11);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].fmul = j6mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].fmul = j8mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x14=new_r22*new_r22;
IkReal x15=((16.0)*new_r10);
IkReal x16=((16.0)*new_r01);
IkReal x17=((16.0)*new_r00);
IkReal x18=(new_r11*new_r22);
IkReal x19=((8.0)*new_r00);
IkReal x20=(x14*x15);
IkReal x21=(x14*x16);
j6eval[0]=((IKabs(((((-1.0)*x21))+x16)))+(IKabs(((((-1.0)*x16))+x21)))+(IKabs((((new_r22*x19))+(((-8.0)*new_r11)))))+(IKabs(((((-32.0)*new_r11*x14))+(((16.0)*new_r11))+((new_r22*x17)))))+(IKabs(((((32.0)*new_r00))+(((-16.0)*x18))+(((-1.0)*x14*x17)))))+(IKabs(((((-1.0)*x20))+x15)))+(IKabs(((((-1.0)*x15))+x20)))+(IKabs(((((-8.0)*x18))+((x14*x19))))));
if( IKabs(j6eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j6, j8]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j6evalpoly[1];
IkReal x22=new_r22*new_r22;
IkReal x23=((16.0)*new_r01);
IkReal x24=(new_r00*new_r22);
IkReal x25=(x22*x23);
IkReal x26=((((8.0)*x24))+(((-8.0)*new_r11)));
op[0]=x26;
op[1]=((((-1.0)*x23))+x25);
op[2]=((((-32.0)*new_r11*x22))+(((16.0)*x24))+(((16.0)*new_r11)));
op[3]=((((-1.0)*x25))+x23);
op[4]=x26;
polyroots4(op,zeror,numroots);
IkReal j6array[4], cj6array[4], sj6array[4], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[4]={true,true,true,true};
_nj6 = 4;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x27=new_r22*new_r22;
IkReal x28=((16.0)*new_r10);
IkReal x29=(new_r11*new_r22);
IkReal x30=((8.0)*x29);
IkReal x31=(new_r00*x27);
IkReal x32=((8.0)*x31);
IkReal x33=(x27*x28);
j6evalpoly[0]=(((htj6*(((((-1.0)*x28))+x33))))+(((htj6*htj6)*(((((32.0)*new_r00))+(((-16.0)*x31))+(((-16.0)*x29))))))+(((-1.0)*x30))+(((htj6*htj6*htj6*htj6)*(((((-1.0)*x30))+x32))))+x32+(((htj6*htj6*htj6)*(((((-1.0)*x33))+x28)))));
if( IKabs(j6evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j8eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x34=new_r22*new_r22;
IkReal x35=cj6*cj6;
IkReal x36=(new_r22*sj6);
IkReal x37=((((-1.0)*x35))+(((-1.0)*x34))+((x34*x35)));
j8eval[0]=x37;
j8eval[1]=((IKabs(((((-1.0)*cj6*new_r00))+((new_r01*x36)))))+(IKabs((((cj6*new_r01))+((new_r00*x36))))));
j8eval[2]=IKsign(x37);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=new_r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=cj6;
j8eval[1]=new_r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x38=IKsin(j8);
IkReal x39=IKcos(j8);
IkReal x40=((1.0)*new_r01);
IkReal x41=((1.0)*new_r22);
IkReal x42=((1.0)*x39);
IkReal x43=((1.0)*x38);
evalcond[0]=(x38+new_r11);
evalcond[1]=((((-1.0)*x42))+new_r10);
evalcond[2]=((((-1.0)*x38*x41))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x40))+(((-1.0)*x39*x41)));
evalcond[4]=((((-1.0)*x43))+(((-1.0)*new_r00*x41)));
evalcond[5]=((((-1.0)*x42))+(((-1.0)*new_r22*x40)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x44=IKsin(j8);
IkReal x45=IKcos(j8);
IkReal x46=((1.0)*x45);
IkReal x47=((1.0)*x44);
evalcond[0]=(x44+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*new_r22*x47))+new_r00);
evalcond[2]=((((-1.0)*new_r22*x46))+new_r01);
evalcond[3]=((((-1.0)*x46))+(((-1.0)*new_r10)));
evalcond[4]=(((new_r00*new_r22))+(((-1.0)*x47)));
evalcond[5]=((((-1.0)*x46))+((new_r01*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x48=new_r22*new_r22;
CheckValue<IkReal> x49=IKPowWithIntegerCheck(((-1.0)+x48),-1);
if(!x49.valid){
continue;
}
if(((x48*(x49.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x48*(x49.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj6)))))+(IKabs((cj6+(((-1.0)*gconst6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x50=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
if( IKabs(((((-1.0)*new_r11*x50))+(((-1.0)*gconst6*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst6*new_r00))+((new_r10*x50)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*x50))+(((-1.0)*gconst6*new_r01))))+IKsqr((((gconst6*new_r00))+((new_r10*x50))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*new_r11*x50))+(((-1.0)*gconst6*new_r01))), (((gconst6*new_r00))+((new_r10*x50))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x51=IKsin(j8);
IkReal x52=IKcos(j8);
IkReal x53=((1.0)*new_r22);
IkReal x54=(gconst6*new_r10);
IkReal x55=(gconst6*new_r11);
IkReal x56=((1.0)*x52);
IkReal x57=((1.0)*x51);
IkReal x58=(gconst6*x52);
IkReal x59=x50;
IkReal x60=(new_r01*x59);
IkReal x61=(new_r22*x59);
IkReal x62=(new_r00*x59);
evalcond[0]=(((gconst6*new_r01))+x51+((new_r11*x59)));
evalcond[1]=(((gconst6*new_r00))+((new_r10*x59))+(((-1.0)*x56)));
evalcond[2]=(((x52*x61))+new_r01+((gconst6*x51)));
evalcond[3]=((((-1.0)*x53*x58))+((x51*x59))+new_r11);
evalcond[4]=((((-1.0)*x51*x53))+x54+(((-1.0)*x62)));
evalcond[5]=((((-1.0)*x52*x53))+x55+(((-1.0)*x60)));
evalcond[6]=((((-1.0)*gconst6*x56))+new_r00+((x51*x61)));
evalcond[7]=((((-1.0)*x56*x59))+(((-1.0)*gconst6*x51*x53))+new_r10);
evalcond[8]=(((new_r22*x54))+(((-1.0)*x53*x62))+(((-1.0)*x57)));
evalcond[9]=(((new_r22*x55))+(((-1.0)*x53*x60))+(((-1.0)*x56)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x63=new_r22*new_r22;
CheckValue<IkReal> x64=IKPowWithIntegerCheck(((-1.0)+x63),-1);
if(!x64.valid){
continue;
}
if(((x63*(x64.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x63*(x64.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj6)))))+(IKabs((cj6+(((-1.0)*gconst6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x65=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
if( IKabs(((((-1.0)*gconst6*new_r01))+((new_r11*x65)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst6*new_r00))+(((-1.0)*new_r10*x65)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+((new_r11*x65))))+IKsqr((((gconst6*new_r00))+(((-1.0)*new_r10*x65))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+((new_r11*x65))), (((gconst6*new_r00))+(((-1.0)*new_r10*x65))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x66=IKsin(j8);
IkReal x67=IKcos(j8);
IkReal x68=(gconst6*new_r10);
IkReal x69=(gconst6*new_r11);
IkReal x70=(gconst6*new_r22);
IkReal x71=((1.0)*x67);
IkReal x72=((1.0)*x66);
IkReal x73=x65;
IkReal x74=(new_r01*x73);
IkReal x75=(new_r00*x73);
IkReal x76=((1.0)*x73);
IkReal x77=(x67*x73);
evalcond[0]=(((gconst6*new_r01))+x66+(((-1.0)*new_r11*x76)));
evalcond[1]=((((-1.0)*x71))+((gconst6*new_r00))+(((-1.0)*new_r10*x76)));
evalcond[2]=(x75+x68+(((-1.0)*new_r22*x72)));
evalcond[3]=(x74+x69+(((-1.0)*new_r22*x71)));
evalcond[4]=(((gconst6*x66))+(((-1.0)*new_r22*x71*x73))+new_r01);
evalcond[5]=((((-1.0)*x70*x72))+x77+new_r10);
evalcond[6]=(((new_r22*x68))+(((-1.0)*x72))+((new_r22*x75)));
evalcond[7]=(((new_r22*x69))+(((-1.0)*x71))+((new_r22*x74)));
evalcond[8]=((((-1.0)*x70*x71))+(((-1.0)*x72*x73))+new_r11);
evalcond[9]=((((-1.0)*gconst6*x71))+new_r00+(((-1.0)*new_r22*x72*x73)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x78=new_r22*new_r22;
CheckValue<IkReal> x79=IKPowWithIntegerCheck(((-1.0)+x78),-1);
if(!x79.valid){
continue;
}
if(((x78*(x79.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x78*(x79.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj6+(((-1.0)*gconst7)))))+(IKabs(((-1.0)+(IKsign(sj6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x80=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
if( IKabs(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*x80)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*x80))+((gconst7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*x80))))+IKsqr((((new_r10*x80))+((gconst7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*x80))), (((new_r10*x80))+((gconst7*new_r00))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x81=IKsin(j8);
IkReal x82=IKcos(j8);
IkReal x83=(gconst7*new_r22);
IkReal x84=((1.0)*x82);
IkReal x85=((1.0)*x81);
IkReal x86=x80;
IkReal x87=((1.0)*x86);
IkReal x88=(new_r22*x86);
evalcond[0]=(x81+((new_r11*x86))+((gconst7*new_r01)));
evalcond[1]=(((new_r10*x86))+(((-1.0)*x84))+((gconst7*new_r00)));
evalcond[2]=(((x82*x88))+((gconst7*x81))+new_r01);
evalcond[3]=((((-1.0)*x83*x84))+((x81*x86))+new_r11);
evalcond[4]=((((-1.0)*new_r00*x87))+(((-1.0)*new_r22*x85))+((gconst7*new_r10)));
evalcond[5]=((((-1.0)*new_r01*x87))+(((-1.0)*new_r22*x84))+((gconst7*new_r11)));
evalcond[6]=((((-1.0)*gconst7*x84))+((x81*x88))+new_r00);
evalcond[7]=((((-1.0)*x83*x85))+(((-1.0)*x84*x86))+new_r10);
evalcond[8]=((((-1.0)*new_r00*new_r22*x87))+((new_r10*x83))+(((-1.0)*x85)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x87))+(((-1.0)*x84))+((new_r11*x83)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x89=new_r22*new_r22;
CheckValue<IkReal> x90=IKPowWithIntegerCheck(((-1.0)+x89),-1);
if(!x90.valid){
continue;
}
if(((x89*(x90.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x89*(x90.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj6+(((-1.0)*gconst7)))))+(IKabs(((1.0)+(IKsign(sj6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x91=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
if( IKabs(((((-1.0)*gconst7*new_r01))+((new_r11*x91)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*x91))+((gconst7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst7*new_r01))+((new_r11*x91))))+IKsqr(((((-1.0)*new_r10*x91))+((gconst7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*gconst7*new_r01))+((new_r11*x91))), ((((-1.0)*new_r10*x91))+((gconst7*new_r00))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x92=IKsin(j8);
IkReal x93=IKcos(j8);
IkReal x94=(gconst7*new_r11);
IkReal x95=(gconst7*new_r22);
IkReal x96=((1.0)*x93);
IkReal x97=((1.0)*x92);
IkReal x98=x91;
IkReal x99=(new_r00*x98);
IkReal x100=(new_r01*x98);
IkReal x101=((1.0)*x98);
IkReal x102=(new_r22*x98);
evalcond[0]=((((-1.0)*new_r11*x101))+x92+((gconst7*new_r01)));
evalcond[1]=((((-1.0)*new_r10*x101))+(((-1.0)*x96))+((gconst7*new_r00)));
evalcond[2]=(x99+(((-1.0)*new_r22*x97))+((gconst7*new_r10)));
evalcond[3]=(x100+x94+(((-1.0)*new_r22*x96)));
evalcond[4]=((((-1.0)*x102*x96))+((gconst7*x92))+new_r01);
evalcond[5]=((((-1.0)*x95*x97))+((x93*x98))+new_r10);
evalcond[6]=(((new_r22*x99))+(((-1.0)*x97))+((new_r10*x95)));
evalcond[7]=(((new_r22*x94))+((new_r22*x100))+(((-1.0)*x96)));
evalcond[8]=((((-1.0)*x95*x96))+new_r11+(((-1.0)*x97*x98)));
evalcond[9]=((((-1.0)*x102*x97))+new_r00+(((-1.0)*gconst7*x96)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x103=((1.0)*sj6);
IkReal x104=(cj6*new_r01);
CheckValue<IkReal> x105=IKPowWithIntegerCheck(cj6,-1);
if(!x105.valid){
continue;
}
CheckValue<IkReal> x106=IKPowWithIntegerCheck(new_r22,-1);
if(!x106.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*x103))+(((-1.0)*x104)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x105.value)*(x106.value)*(((((-1.0)*x103*x104))+((new_r11*(cj6*cj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*x103))+(((-1.0)*x104))))+IKsqr(((x105.value)*(x106.value)*(((((-1.0)*x103*x104))+((new_r11*(cj6*cj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*new_r11*x103))+(((-1.0)*x104))), ((x105.value)*(x106.value)*(((((-1.0)*x103*x104))+((new_r11*(cj6*cj6)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x107=IKcos(j8);
IkReal x108=IKsin(j8);
IkReal x109=(cj6*new_r10);
IkReal x110=((1.0)*cj6);
IkReal x111=(new_r22*sj6);
IkReal x112=((1.0)*new_r01);
IkReal x113=(cj6*new_r22);
IkReal x114=((1.0)*sj6);
IkReal x115=((1.0)*x107);
IkReal x116=(new_r22*x107);
IkReal x117=((1.0)*x108);
evalcond[0]=(((new_r11*sj6))+x108+((cj6*new_r01)));
evalcond[1]=(((new_r10*sj6))+(((-1.0)*x115))+((cj6*new_r00)));
evalcond[2]=(((cj6*x108))+new_r01+((x107*x111)));
evalcond[3]=(((sj6*x108))+(((-1.0)*x110*x116))+new_r11);
evalcond[4]=((((-1.0)*new_r00*x114))+x109+(((-1.0)*new_r22*x117)));
evalcond[5]=((((-1.0)*sj6*x112))+((cj6*new_r11))+(((-1.0)*new_r22*x115)));
evalcond[6]=((((-1.0)*x107*x110))+((x108*x111))+new_r00);
evalcond[7]=((((-1.0)*x107*x114))+(((-1.0)*new_r22*x108*x110))+new_r10);
evalcond[8]=(((new_r22*x109))+(((-1.0)*x117))+(((-1.0)*new_r00*x111)));
evalcond[9]=((((-1.0)*x111*x112))+((new_r11*x113))+(((-1.0)*x115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x118=((1.0)*sj6);
CheckValue<IkReal> x119=IKPowWithIntegerCheck(new_r22,-1);
if(!x119.valid){
continue;
}
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x118)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x119.value)*(((((-1.0)*new_r01*x118))+((cj6*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x118))))+IKsqr(((x119.value)*(((((-1.0)*new_r01*x118))+((cj6*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x118))), ((x119.value)*(((((-1.0)*new_r01*x118))+((cj6*new_r11))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x120=IKcos(j8);
IkReal x121=IKsin(j8);
IkReal x122=(cj6*new_r10);
IkReal x123=((1.0)*cj6);
IkReal x124=(new_r22*sj6);
IkReal x125=((1.0)*new_r01);
IkReal x126=(cj6*new_r22);
IkReal x127=((1.0)*sj6);
IkReal x128=((1.0)*x120);
IkReal x129=(new_r22*x120);
IkReal x130=((1.0)*x121);
evalcond[0]=(((new_r11*sj6))+x121+((cj6*new_r01)));
evalcond[1]=(((new_r10*sj6))+(((-1.0)*x128))+((cj6*new_r00)));
evalcond[2]=(((cj6*x121))+((x120*x124))+new_r01);
evalcond[3]=((((-1.0)*x123*x129))+((sj6*x121))+new_r11);
evalcond[4]=((((-1.0)*new_r00*x127))+x122+(((-1.0)*new_r22*x130)));
evalcond[5]=((((-1.0)*sj6*x125))+((cj6*new_r11))+(((-1.0)*new_r22*x128)));
evalcond[6]=((((-1.0)*x120*x123))+((x121*x124))+new_r00);
evalcond[7]=((((-1.0)*x120*x127))+(((-1.0)*new_r22*x121*x123))+new_r10);
evalcond[8]=(((new_r22*x122))+(((-1.0)*x130))+(((-1.0)*new_r00*x124)));
evalcond[9]=((((-1.0)*x128))+(((-1.0)*x124*x125))+((new_r11*x126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x131=new_r22*new_r22;
IkReal x132=cj6*cj6;
IkReal x133=(new_r22*sj6);
CheckValue<IkReal> x134=IKPowWithIntegerCheck(IKsign((((x131*x132))+(((-1.0)*x131))+(((-1.0)*x132)))),-1);
if(!x134.valid){
continue;
}
CheckValue<IkReal> x135 = IKatan2WithCheck(IkReal((((new_r00*x133))+((cj6*new_r01)))),IkReal(((((-1.0)*cj6*new_r00))+((new_r01*x133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x135.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x134.value)))+(x135.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x136=IKcos(j8);
IkReal x137=IKsin(j8);
IkReal x138=(cj6*new_r10);
IkReal x139=((1.0)*cj6);
IkReal x140=(new_r22*sj6);
IkReal x141=((1.0)*new_r01);
IkReal x142=(cj6*new_r22);
IkReal x143=((1.0)*sj6);
IkReal x144=((1.0)*x136);
IkReal x145=(new_r22*x136);
IkReal x146=((1.0)*x137);
evalcond[0]=(((new_r11*sj6))+x137+((cj6*new_r01)));
evalcond[1]=((((-1.0)*x144))+((new_r10*sj6))+((cj6*new_r00)));
evalcond[2]=(((cj6*x137))+((x136*x140))+new_r01);
evalcond[3]=(((sj6*x137))+(((-1.0)*x139*x145))+new_r11);
evalcond[4]=((((-1.0)*new_r22*x146))+x138+(((-1.0)*new_r00*x143)));
evalcond[5]=((((-1.0)*new_r22*x144))+((cj6*new_r11))+(((-1.0)*sj6*x141)));
evalcond[6]=(((x137*x140))+(((-1.0)*x136*x139))+new_r00);
evalcond[7]=((((-1.0)*new_r22*x137*x139))+new_r10+(((-1.0)*x136*x143)));
evalcond[8]=((((-1.0)*x146))+((new_r22*x138))+(((-1.0)*new_r00*x140)));
evalcond[9]=((((-1.0)*x144))+(((-1.0)*x140*x141))+((new_r11*x142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x148=IKPowWithIntegerCheck(cj7,-1);
if(!x148.valid){
continue;
}
IkReal x147=x148.value;
CheckValue<IkReal> x149=IKPowWithIntegerCheck(new_r02,-1);
if(!x149.valid){
continue;
}
CheckValue<IkReal> x150=IKPowWithIntegerCheck(x147,-2);
if(!x150.valid){
continue;
}
if( IKabs((x147*(x149.value)*(((x150.value)+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x147)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x147*(x149.value)*(((x150.value)+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x147))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x147*(x149.value)*(((x150.value)+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x147));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x151=IKcos(j6);
IkReal x152=IKsin(j6);
IkReal x153=(new_r02*x152);
IkReal x154=(cj7*x151);
IkReal x155=(new_r12*x151);
IkReal x156=((1.0)*cj7*x152);
evalcond[0]=(x154+new_r12);
evalcond[1]=((((-1.0)*x156))+new_r02);
evalcond[2]=(((new_r12*x152))+((new_r02*x151)));
evalcond[3]=(cj7+x155+(((-1.0)*x153)));
evalcond[4]=(((new_r20*sj7))+((new_r10*x154))+(((-1.0)*new_r00*x156)));
evalcond[5]=(((new_r11*x154))+((new_r21*sj7))+(((-1.0)*new_r01*x156)));
evalcond[6]=(((sj7*x153))+(((-1.0)*sj7*x155))+((cj7*new_r22)));
evalcond[7]=((1.0)+((new_r12*x154))+((new_r22*sj7))+(((-1.0)*cj7*x153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=cj7;
j8eval[1]=sj6;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=sj6;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x157=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj6))+(((-1.0)*cj6*x157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x157))))+IKsqr((((new_r01*sj6))+(((-1.0)*cj6*x157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x157))), (((new_r01*sj6))+(((-1.0)*cj6*x157))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x158=IKsin(j8);
IkReal x159=IKcos(j8);
IkReal x160=((1.0)*sj6);
IkReal x161=(cj6*x158);
IkReal x162=(cj6*x159);
IkReal x163=(x159*x160);
evalcond[0]=(((new_r11*sj6))+x158+((cj6*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x160))+x158+((cj6*new_r10)));
evalcond[2]=(x159+((cj6*new_r11))+(((-1.0)*new_r01*x160)));
evalcond[3]=(((new_r10*sj6))+(((-1.0)*x159))+((cj6*new_r00)));
evalcond[4]=(x162+((sj6*x158))+new_r11);
evalcond[5]=((((-1.0)*x163))+x161+new_r01);
evalcond[6]=((((-1.0)*x163))+x161+new_r10);
evalcond[7]=((((-1.0)*x158*x160))+(((-1.0)*x162))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x164=((1.0)*sj6);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*new_r11))+(((-1.0)*new_r01*x164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x164))))+IKsqr((((cj6*new_r11))+(((-1.0)*new_r01*x164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x164))), (((cj6*new_r11))+(((-1.0)*new_r01*x164))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x165=IKsin(j8);
IkReal x166=IKcos(j8);
IkReal x167=((1.0)*sj6);
IkReal x168=((1.0)*x166);
IkReal x169=(sj6*x165);
IkReal x170=((1.0)*x165);
IkReal x171=(cj6*x168);
evalcond[0]=(((new_r11*sj6))+x165+((cj6*new_r01)));
evalcond[1]=((((-1.0)*x168))+((new_r10*sj6))+((cj6*new_r00)));
evalcond[2]=(((cj6*x165))+((sj6*x166))+new_r01);
evalcond[3]=((((-1.0)*x171))+x169+new_r11);
evalcond[4]=((((-1.0)*new_r00*x167))+(((-1.0)*x170))+((cj6*new_r10)));
evalcond[5]=((((-1.0)*x168))+((cj6*new_r11))+(((-1.0)*new_r01*x167)));
evalcond[6]=((((-1.0)*x171))+x169+new_r00);
evalcond[7]=((((-1.0)*x166*x167))+(((-1.0)*cj6*x170))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x172=IKcos(j8);
IkReal x173=IKsin(j8);
IkReal x174=((1.0)*sj7);
IkReal x175=((1.0)*x172);
IkReal x176=((1.0)*x173);
evalcond[0]=(x173+new_r01);
evalcond[1]=((((-1.0)*x175))+new_r00);
evalcond[2]=(((sj7*x172))+new_r11);
evalcond[3]=(((sj7*x173))+new_r10);
evalcond[4]=((((-1.0)*cj7*x176))+new_r20);
evalcond[5]=((((-1.0)*cj7*x175))+new_r21);
evalcond[6]=((((-1.0)*x176))+(((-1.0)*new_r10*x174))+((cj7*new_r20)));
evalcond[7]=((((-1.0)*x175))+(((-1.0)*new_r11*x174))+((cj7*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x177=IKsin(j8);
IkReal x178=IKcos(j8);
IkReal x179=((1.0)*x178);
IkReal x180=((1.0)*x177);
evalcond[0]=(x177+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*cj7*x180))+new_r20);
evalcond[2]=((((-1.0)*cj7*x179))+new_r21);
evalcond[3]=((((-1.0)*sj7*x179))+new_r11);
evalcond[4]=((((-1.0)*x179))+(((-1.0)*new_r00)));
evalcond[5]=(((sj7*x177))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r10*sj7))+(((-1.0)*x180))+((cj7*new_r20)));
evalcond[7]=((((-1.0)*x179))+((new_r11*sj7))+((cj7*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r20, new_r21);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x181=IKsin(j8);
IkReal x182=IKcos(j8);
IkReal x183=((1.0)*x182);
evalcond[0]=((((-1.0)*x181))+new_r20);
evalcond[1]=((((-1.0)*x183))+new_r21);
evalcond[2]=(((sj6*x181))+new_r11);
evalcond[3]=(((cj6*x181))+new_r01);
evalcond[4]=((((-1.0)*sj6*x183))+new_r10);
evalcond[5]=((((-1.0)*cj6*x183))+new_r00);
evalcond[6]=(((new_r11*sj6))+x181+((cj6*new_r01)));
evalcond[7]=(((new_r10*sj6))+(((-1.0)*x183))+((cj6*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x184=IKsin(j8);
IkReal x185=IKcos(j8);
IkReal x186=((1.0)*x185);
evalcond[0]=(x184+new_r20);
evalcond[1]=(x185+new_r21);
evalcond[2]=(((sj6*x184))+new_r11);
evalcond[3]=(((cj6*x184))+new_r01);
evalcond[4]=((((-1.0)*sj6*x186))+new_r10);
evalcond[5]=((((-1.0)*cj6*x186))+new_r00);
evalcond[6]=(((new_r11*sj6))+x184+((cj6*new_r01)));
evalcond[7]=(((new_r10*sj6))+(((-1.0)*x186))+((cj6*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j8]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x188=IKPowWithIntegerCheck(cj7,-1);
if(!x188.valid){
continue;
}
IkReal x187=x188.value;
CheckValue<IkReal> x189=IKPowWithIntegerCheck(sj6,-1);
if(!x189.valid){
continue;
}
CheckValue<IkReal> x190=IKPowWithIntegerCheck(sj7,-1);
if(!x190.valid){
continue;
}
if( IKabs((new_r20*x187)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x187*(x189.value)*(x190.value)*((((cj7*new_r01))+((cj6*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x187))+IKsqr((x187*(x189.value)*(x190.value)*((((cj7*new_r01))+((cj6*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r20*x187), (x187*(x189.value)*(x190.value)*((((cj7*new_r01))+((cj6*new_r20))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x191=IKsin(j8);
IkReal x192=IKcos(j8);
IkReal x193=(cj6*new_r10);
IkReal x194=(cj6*new_r11);
IkReal x195=((1.0)*sj7);
IkReal x196=(new_r00*sj6);
IkReal x197=(sj6*sj7);
IkReal x198=((1.0)*x192);
IkReal x199=((1.0)*x191);
IkReal x200=(cj6*x191);
IkReal x201=(sj7*x192);
evalcond[0]=((((-1.0)*cj7*x199))+new_r20);
evalcond[1]=((((-1.0)*cj7*x198))+new_r21);
evalcond[2]=(((new_r11*sj6))+x191+((cj6*new_r01)));
evalcond[3]=(((new_r10*sj6))+(((-1.0)*x198))+((cj6*new_r00)));
evalcond[4]=(((cj6*x201))+((sj6*x191))+new_r11);
evalcond[5]=((((-1.0)*x196))+x193+((sj7*x191)));
evalcond[6]=((((-1.0)*new_r01*sj6))+x194+x201);
evalcond[7]=((((-1.0)*sj6*x192*x195))+x200+new_r01);
evalcond[8]=((((-1.0)*sj6*x198))+new_r10+((sj7*x200)));
evalcond[9]=((((-1.0)*sj6*x191*x195))+(((-1.0)*cj6*x198))+new_r00);
evalcond[10]=((((-1.0)*x199))+((cj7*new_r20))+((sj7*x196))+(((-1.0)*x193*x195)));
evalcond[11]=(((new_r01*x197))+(((-1.0)*x194*x195))+(((-1.0)*x198))+((cj7*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x203=IKPowWithIntegerCheck(cj7,-1);
if(!x203.valid){
continue;
}
IkReal x202=x203.value;
CheckValue<IkReal> x204=IKPowWithIntegerCheck(sj6,-1);
if(!x204.valid){
continue;
}
if( IKabs((x202*(x204.value)*(((((-1.0)*cj7*new_r11))+(((-1.0)*cj6*new_r21*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r21*x202)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x202*(x204.value)*(((((-1.0)*cj7*new_r11))+(((-1.0)*cj6*new_r21*sj7))))))+IKsqr((new_r21*x202))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x202*(x204.value)*(((((-1.0)*cj7*new_r11))+(((-1.0)*cj6*new_r21*sj7))))), (new_r21*x202));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x205=IKsin(j8);
IkReal x206=IKcos(j8);
IkReal x207=(cj6*new_r10);
IkReal x208=(cj6*new_r11);
IkReal x209=((1.0)*sj7);
IkReal x210=(new_r00*sj6);
IkReal x211=(sj6*sj7);
IkReal x212=((1.0)*x206);
IkReal x213=((1.0)*x205);
IkReal x214=(cj6*x205);
IkReal x215=(sj7*x206);
evalcond[0]=(new_r20+(((-1.0)*cj7*x213)));
evalcond[1]=(new_r21+(((-1.0)*cj7*x212)));
evalcond[2]=(((new_r11*sj6))+x205+((cj6*new_r01)));
evalcond[3]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x212)));
evalcond[4]=(((cj6*x215))+new_r11+((sj6*x205)));
evalcond[5]=(x207+(((-1.0)*x210))+((sj7*x205)));
evalcond[6]=((((-1.0)*new_r01*sj6))+x215+x208);
evalcond[7]=(x214+(((-1.0)*sj6*x206*x209))+new_r01);
evalcond[8]=((((-1.0)*sj6*x212))+((sj7*x214))+new_r10);
evalcond[9]=((((-1.0)*cj6*x212))+(((-1.0)*sj6*x205*x209))+new_r00);
evalcond[10]=(((cj7*new_r20))+(((-1.0)*x207*x209))+((sj7*x210))+(((-1.0)*x213)));
evalcond[11]=((((-1.0)*x208*x209))+((cj7*new_r21))+((new_r01*x211))+(((-1.0)*x212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x216.valid){
continue;
}
CheckValue<IkReal> x217 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x217.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x216.value)))+(x217.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x218=IKsin(j8);
IkReal x219=IKcos(j8);
IkReal x220=(cj6*new_r10);
IkReal x221=(cj6*new_r11);
IkReal x222=((1.0)*sj7);
IkReal x223=(new_r00*sj6);
IkReal x224=(sj6*sj7);
IkReal x225=((1.0)*x219);
IkReal x226=((1.0)*x218);
IkReal x227=(cj6*x218);
IkReal x228=(sj7*x219);
evalcond[0]=((((-1.0)*cj7*x226))+new_r20);
evalcond[1]=((((-1.0)*cj7*x225))+new_r21);
evalcond[2]=(((new_r11*sj6))+x218+((cj6*new_r01)));
evalcond[3]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x225)));
evalcond[4]=(((cj6*x228))+((sj6*x218))+new_r11);
evalcond[5]=(x220+((sj7*x218))+(((-1.0)*x223)));
evalcond[6]=((((-1.0)*new_r01*sj6))+x228+x221);
evalcond[7]=(x227+new_r01+(((-1.0)*sj6*x219*x222)));
evalcond[8]=(((sj7*x227))+new_r10+(((-1.0)*sj6*x225)));
evalcond[9]=((((-1.0)*sj6*x218*x222))+new_r00+(((-1.0)*cj6*x225)));
evalcond[10]=(((sj7*x223))+((cj7*new_r20))+(((-1.0)*x220*x222))+(((-1.0)*x226)));
evalcond[11]=(((new_r01*x224))+((cj7*new_r21))+(((-1.0)*x221*x222))+(((-1.0)*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x229=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x229.valid){
continue;
}
CheckValue<IkReal> x230 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x230.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x229.value)))+(x230.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x231=IKcos(j6);
IkReal x232=IKsin(j6);
IkReal x233=(new_r02*x232);
IkReal x234=(cj7*x231);
IkReal x235=(new_r12*x231);
IkReal x236=((1.0)*cj7*x232);
evalcond[0]=(x234+new_r12);
evalcond[1]=((((-1.0)*x236))+new_r02);
evalcond[2]=(((new_r02*x231))+((new_r12*x232)));
evalcond[3]=(cj7+x235+(((-1.0)*x233)));
evalcond[4]=(((new_r10*x234))+((new_r20*sj7))+(((-1.0)*new_r00*x236)));
evalcond[5]=(((new_r11*x234))+((new_r21*sj7))+(((-1.0)*new_r01*x236)));
evalcond[6]=(((cj7*new_r22))+(((-1.0)*sj7*x235))+((sj7*x233)));
evalcond[7]=((1.0)+((new_r12*x234))+((new_r22*sj7))+(((-1.0)*cj7*x233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=cj7;
j8eval[1]=sj6;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=sj6;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x237=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj6))+(((-1.0)*cj6*x237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x237))))+IKsqr((((new_r01*sj6))+(((-1.0)*cj6*x237))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x237))), (((new_r01*sj6))+(((-1.0)*cj6*x237))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x238=IKsin(j8);
IkReal x239=IKcos(j8);
IkReal x240=((1.0)*sj6);
IkReal x241=(cj6*x238);
IkReal x242=(cj6*x239);
IkReal x243=(x239*x240);
evalcond[0]=(((new_r11*sj6))+x238+((cj6*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x240))+((cj6*new_r10))+x238);
evalcond[2]=((((-1.0)*new_r01*x240))+((cj6*new_r11))+x239);
evalcond[3]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x239)));
evalcond[4]=(x242+new_r11+((sj6*x238)));
evalcond[5]=(x241+(((-1.0)*x243))+new_r01);
evalcond[6]=(x241+(((-1.0)*x243))+new_r10);
evalcond[7]=((((-1.0)*x242))+(((-1.0)*x238*x240))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x244=((1.0)*sj6);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x244))+((cj6*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x244))))+IKsqr(((((-1.0)*new_r01*x244))+((cj6*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x244))), ((((-1.0)*new_r01*x244))+((cj6*new_r11))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x245=IKsin(j8);
IkReal x246=IKcos(j8);
IkReal x247=((1.0)*sj6);
IkReal x248=((1.0)*x246);
IkReal x249=(sj6*x245);
IkReal x250=((1.0)*x245);
IkReal x251=(cj6*x248);
evalcond[0]=(((new_r11*sj6))+x245+((cj6*new_r01)));
evalcond[1]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x248)));
evalcond[2]=(((sj6*x246))+((cj6*x245))+new_r01);
evalcond[3]=(x249+new_r11+(((-1.0)*x251)));
evalcond[4]=((((-1.0)*new_r00*x247))+((cj6*new_r10))+(((-1.0)*x250)));
evalcond[5]=((((-1.0)*new_r01*x247))+((cj6*new_r11))+(((-1.0)*x248)));
evalcond[6]=(x249+new_r00+(((-1.0)*x251)));
evalcond[7]=(new_r10+(((-1.0)*x246*x247))+(((-1.0)*cj6*x250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x252=IKcos(j8);
IkReal x253=IKsin(j8);
IkReal x254=((1.0)*sj7);
IkReal x255=((1.0)*x252);
IkReal x256=((1.0)*x253);
evalcond[0]=(x253+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x255)));
evalcond[2]=(((sj7*x252))+new_r11);
evalcond[3]=(((sj7*x253))+new_r10);
evalcond[4]=((((-1.0)*cj7*x256))+new_r20);
evalcond[5]=((((-1.0)*cj7*x255))+new_r21);
evalcond[6]=((((-1.0)*new_r10*x254))+((cj7*new_r20))+(((-1.0)*x256)));
evalcond[7]=((((-1.0)*new_r11*x254))+((cj7*new_r21))+(((-1.0)*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x257=IKsin(j8);
IkReal x258=IKcos(j8);
IkReal x259=((1.0)*x258);
IkReal x260=((1.0)*x257);
evalcond[0]=(x257+(((-1.0)*new_r01)));
evalcond[1]=(new_r20+(((-1.0)*cj7*x260)));
evalcond[2]=((((-1.0)*cj7*x259))+new_r21);
evalcond[3]=((((-1.0)*sj7*x259))+new_r11);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x259)));
evalcond[5]=(((sj7*x257))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r10*sj7))+((cj7*new_r20))+(((-1.0)*x260)));
evalcond[7]=(((new_r11*sj7))+((cj7*new_r21))+(((-1.0)*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r20, new_r21);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x261=IKsin(j8);
IkReal x262=IKcos(j8);
IkReal x263=((1.0)*x262);
evalcond[0]=((((-1.0)*x261))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x263)));
evalcond[2]=(((sj6*x261))+new_r11);
evalcond[3]=(((cj6*x261))+new_r01);
evalcond[4]=((((-1.0)*sj6*x263))+new_r10);
evalcond[5]=((((-1.0)*cj6*x263))+new_r00);
evalcond[6]=(((new_r11*sj6))+x261+((cj6*new_r01)));
evalcond[7]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x264=IKsin(j8);
IkReal x265=IKcos(j8);
IkReal x266=((1.0)*x265);
evalcond[0]=(x264+new_r20);
evalcond[1]=(x265+new_r21);
evalcond[2]=(((sj6*x264))+new_r11);
evalcond[3]=(((cj6*x264))+new_r01);
evalcond[4]=((((-1.0)*sj6*x266))+new_r10);
evalcond[5]=((((-1.0)*cj6*x266))+new_r00);
evalcond[6]=(((new_r11*sj6))+x264+((cj6*new_r01)));
evalcond[7]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j8]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x268=IKPowWithIntegerCheck(cj7,-1);
if(!x268.valid){
continue;
}
IkReal x267=x268.value;
CheckValue<IkReal> x269=IKPowWithIntegerCheck(sj6,-1);
if(!x269.valid){
continue;
}
CheckValue<IkReal> x270=IKPowWithIntegerCheck(sj7,-1);
if(!x270.valid){
continue;
}
if( IKabs((new_r20*x267)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x267*(x269.value)*(x270.value)*((((cj7*new_r01))+((cj6*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x267))+IKsqr((x267*(x269.value)*(x270.value)*((((cj7*new_r01))+((cj6*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r20*x267), (x267*(x269.value)*(x270.value)*((((cj7*new_r01))+((cj6*new_r20))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x271=IKsin(j8);
IkReal x272=IKcos(j8);
IkReal x273=(cj6*new_r10);
IkReal x274=(cj6*new_r11);
IkReal x275=((1.0)*sj7);
IkReal x276=(new_r00*sj6);
IkReal x277=(sj6*sj7);
IkReal x278=((1.0)*x272);
IkReal x279=((1.0)*x271);
IkReal x280=(cj6*x271);
IkReal x281=(sj7*x272);
evalcond[0]=(new_r20+(((-1.0)*cj7*x279)));
evalcond[1]=(new_r21+(((-1.0)*cj7*x278)));
evalcond[2]=(((new_r11*sj6))+x271+((cj6*new_r01)));
evalcond[3]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x278)));
evalcond[4]=(((sj6*x271))+((cj6*x281))+new_r11);
evalcond[5]=((((-1.0)*x276))+x273+((sj7*x271)));
evalcond[6]=((((-1.0)*new_r01*sj6))+x274+x281);
evalcond[7]=(x280+(((-1.0)*sj6*x272*x275))+new_r01);
evalcond[8]=((((-1.0)*sj6*x278))+((sj7*x280))+new_r10);
evalcond[9]=((((-1.0)*cj6*x278))+(((-1.0)*sj6*x271*x275))+new_r00);
evalcond[10]=((((-1.0)*x273*x275))+((cj7*new_r20))+((sj7*x276))+(((-1.0)*x279)));
evalcond[11]=((((-1.0)*x274*x275))+((cj7*new_r21))+((new_r01*x277))+(((-1.0)*x278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x283=IKPowWithIntegerCheck(cj7,-1);
if(!x283.valid){
continue;
}
IkReal x282=x283.value;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(sj6,-1);
if(!x284.valid){
continue;
}
if( IKabs((x282*(x284.value)*(((((-1.0)*cj7*new_r11))+(((-1.0)*cj6*new_r21*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r21*x282)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x282*(x284.value)*(((((-1.0)*cj7*new_r11))+(((-1.0)*cj6*new_r21*sj7))))))+IKsqr((new_r21*x282))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x282*(x284.value)*(((((-1.0)*cj7*new_r11))+(((-1.0)*cj6*new_r21*sj7))))), (new_r21*x282));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x285=IKsin(j8);
IkReal x286=IKcos(j8);
IkReal x287=(cj6*new_r10);
IkReal x288=(cj6*new_r11);
IkReal x289=((1.0)*sj7);
IkReal x290=(new_r00*sj6);
IkReal x291=(sj6*sj7);
IkReal x292=((1.0)*x286);
IkReal x293=((1.0)*x285);
IkReal x294=(cj6*x285);
IkReal x295=(sj7*x286);
evalcond[0]=((((-1.0)*cj7*x293))+new_r20);
evalcond[1]=((((-1.0)*cj7*x292))+new_r21);
evalcond[2]=(((new_r11*sj6))+x285+((cj6*new_r01)));
evalcond[3]=(((new_r10*sj6))+(((-1.0)*x292))+((cj6*new_r00)));
evalcond[4]=(((sj6*x285))+((cj6*x295))+new_r11);
evalcond[5]=((((-1.0)*x290))+((sj7*x285))+x287);
evalcond[6]=((((-1.0)*new_r01*sj6))+x295+x288);
evalcond[7]=(x294+(((-1.0)*sj6*x286*x289))+new_r01);
evalcond[8]=((((-1.0)*sj6*x292))+new_r10+((sj7*x294)));
evalcond[9]=(new_r00+(((-1.0)*sj6*x285*x289))+(((-1.0)*cj6*x292)));
evalcond[10]=((((-1.0)*x287*x289))+(((-1.0)*x293))+((cj7*new_r20))+((sj7*x290)));
evalcond[11]=((((-1.0)*x288*x289))+(((-1.0)*x292))+((cj7*new_r21))+((new_r01*x291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x296=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x296.valid){
continue;
}
CheckValue<IkReal> x297 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x297.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x296.value)))+(x297.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x298=IKsin(j8);
IkReal x299=IKcos(j8);
IkReal x300=(cj6*new_r10);
IkReal x301=(cj6*new_r11);
IkReal x302=((1.0)*sj7);
IkReal x303=(new_r00*sj6);
IkReal x304=(sj6*sj7);
IkReal x305=((1.0)*x299);
IkReal x306=((1.0)*x298);
IkReal x307=(cj6*x298);
IkReal x308=(sj7*x299);
evalcond[0]=((((-1.0)*cj7*x306))+new_r20);
evalcond[1]=((((-1.0)*cj7*x305))+new_r21);
evalcond[2]=(((new_r11*sj6))+x298+((cj6*new_r01)));
evalcond[3]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x305)));
evalcond[4]=(((cj6*x308))+((sj6*x298))+new_r11);
evalcond[5]=((((-1.0)*x303))+x300+((sj7*x298)));
evalcond[6]=((((-1.0)*new_r01*sj6))+x308+x301);
evalcond[7]=((((-1.0)*sj6*x299*x302))+x307+new_r01);
evalcond[8]=(((sj7*x307))+(((-1.0)*sj6*x305))+new_r10);
evalcond[9]=(new_r00+(((-1.0)*sj6*x298*x302))+(((-1.0)*cj6*x305)));
evalcond[10]=(((sj7*x303))+((cj7*new_r20))+(((-1.0)*x300*x302))+(((-1.0)*x306)));
evalcond[11]=((((-1.0)*x301*x302))+((new_r01*x304))+((cj7*new_r21))+(((-1.0)*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x309=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x309.valid){
continue;
}
CheckValue<IkReal> x310 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x310.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x309.value)))+(x310.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x311=((1.0)*cj7);
evalcond[0]=(new_r20+(((-1.0)*x311*(IKsin(j8)))));
evalcond[1]=((((-1.0)*x311*(IKcos(j8))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=cj7;
j6eval[1]=IKsign(cj7);
j6eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=cj7;
j6eval[1]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x312=((1.0)*sj8);
IkReal x313=(((new_r10*new_r11))+((new_r00*new_r01)));
j6eval[0]=x313;
j6eval[1]=IKsign(x313);
j6eval[2]=((IKabs(((((-1.0)*new_r00*x312))+(((-1.0)*new_r11*x312)))))+(IKabs((((new_r01*sj8))+(((-1.0)*new_r10*x312))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x314=((1.0)*new_r11);
IkReal x315=((new_r01*new_r01)+(new_r11*new_r11));
j6eval[0]=x315;
j6eval[1]=((IKabs(((((-1.0)*sj8*x314))+((cj8*new_r01)))))+(IKabs(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x314))))));
j6eval[2]=IKsign(x315);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x316=(((new_r11*sj8))+((cj8*new_r01)));
j6eval[0]=x316;
j6eval[1]=((IKabs(((-1.0)+(new_r01*new_r01)+(cj8*cj8))))+(IKabs(((((-1.0)*cj8*sj8))+(((-1.0)*new_r01*new_r11))))));
j6eval[2]=IKsign(x316);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x318 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x318)==0){
continue;
}
IkReal x317=pow(x318,-0.5);
CheckValue<IkReal> x319 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x319.valid){
continue;
}
IkReal gconst0=((-1.0)*(x319.value));
IkReal gconst1=((-1.0)*new_r01*x317);
IkReal gconst2=(new_r11*x317);
CheckValue<IkReal> x320 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x320.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x320.value)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
CheckValue<IkReal> x323 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x323.valid){
continue;
}
IkReal x321=((-1.0)*(x323.value));
IkReal x322=x317;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x321;
IkReal gconst0=x321;
IkReal gconst1=((-1.0)*new_r01*x322);
IkReal gconst2=(new_r11*x322);
IkReal x324=new_r01*new_r01;
IkReal x325=(new_r00*new_r01);
IkReal x326=(((new_r10*new_r11))+x325);
IkReal x327=x317;
IkReal x328=(new_r01*x327);
j6eval[0]=x326;
j6eval[1]=((IKabs((((x325*x327))+((new_r11*x328)))))+(IKabs(((((-1.0)*x324*x327))+((new_r10*x328))))));
j6eval[2]=IKsign(x326);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
CheckValue<IkReal> x331 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x331.valid){
continue;
}
IkReal x329=((-1.0)*(x331.value));
IkReal x330=x317;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x329;
IkReal gconst0=x329;
IkReal gconst1=((-1.0)*new_r01*x330);
IkReal gconst2=(new_r11*x330);
IkReal x332=((new_r01*new_r01)+(new_r11*new_r11));
j6eval[0]=x332;
j6eval[1]=IKsign(x332);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x335 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x335.valid){
continue;
}
IkReal x333=((-1.0)*(x335.value));
IkReal x334=x317;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x333;
IkReal gconst0=x333;
IkReal gconst1=((-1.0)*new_r01*x334);
IkReal gconst2=(new_r11*x334);
IkReal x336=new_r01*new_r01;
IkReal x337=new_r11*new_r11;
IkReal x338=((1.0)*x336);
CheckValue<IkReal> x344=IKPowWithIntegerCheck((x337+x336),-1);
if(!x344.valid){
continue;
}
IkReal x339=x344.value;
CheckValue<IkReal> x345=IKPowWithIntegerCheck(((((-1.0)*x337))+(((-1.0)*x338))),-1);
if(!x345.valid){
continue;
}
IkReal x340=x345.value;
IkReal x341=((1.0)*x340);
IkReal x342=(new_r11*x341);
IkReal x343=(new_r01*x341);
j6eval[0]=((IKabs(((((-1.0)*x338*x339))+((x336*x337*x339))+((x339*(x337*x337))))))+(IKabs(((((-1.0)*x342*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x342*(new_r11*new_r11)))+(((-1.0)*new_r01*x342))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
CheckValue<IkReal> x347 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x347.valid){
continue;
}
IkReal x346=((-1.0)*(x347.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x346;
new_r11=0;
new_r00=0;
IkReal gconst0=x346;
IkReal x348 = new_r01*new_r01;
if(IKabs(x348)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r01*(pow(x348,-0.5)));
IkReal gconst2=0;
j6eval[0]=new_r01;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x350 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x350.valid){
continue;
}
IkReal x349=((-1.0)*(x350.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x349;
new_r11=0;
new_r00=0;
IkReal gconst0=x349;
IkReal x351 = new_r01*new_r01;
if(IKabs(x351)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r01*(pow(x351,-0.5)));
IkReal gconst2=0;
j6eval[0]=new_r10;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x352=IKPowWithIntegerCheck(gconst1,-1);
if(!x352.valid){
continue;
}
cj6array[0]=((-1.0)*new_r01*(x352.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x353=IKsin(j6);
IkReal x354=IKcos(j6);
evalcond[0]=(new_r10*x353);
evalcond[1]=(gconst1*x353);
evalcond[2]=((-1.0)*new_r01*x353);
evalcond[3]=(((new_r01*x354))+gconst1);
evalcond[4]=(gconst1+((new_r10*x354)));
evalcond[5]=(((gconst1*x354))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x355=IKPowWithIntegerCheck(new_r10,-1);
if(!x355.valid){
continue;
}
cj6array[0]=((-1.0)*gconst1*(x355.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x356=IKsin(j6);
IkReal x357=IKcos(j6);
IkReal x358=(gconst1*x357);
evalcond[0]=(new_r10*x356);
evalcond[1]=(gconst1*x356);
evalcond[2]=((-1.0)*new_r01*x356);
evalcond[3]=(((new_r01*x357))+gconst1);
evalcond[4]=(x358+new_r01);
evalcond[5]=(x358+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x359=IKPowWithIntegerCheck(new_r01,-1);
if(!x359.valid){
continue;
}
cj6array[0]=((-1.0)*gconst1*(x359.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x360=IKsin(j6);
IkReal x361=IKcos(j6);
IkReal x362=(gconst1*x361);
evalcond[0]=(new_r10*x360);
evalcond[1]=(gconst1*x360);
evalcond[2]=((-1.0)*new_r01*x360);
evalcond[3]=(gconst1+((new_r10*x361)));
evalcond[4]=(x362+new_r01);
evalcond[5]=(x362+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst1;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
CheckValue<IkReal> x364 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x364.valid){
continue;
}
IkReal x363=((-1.0)*(x364.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x363;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x363;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j6eval[0]=-1.0;
j6eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j6eval[2]=-1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
IkReal x365=((-1.0)*(x366.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x365;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x365;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j6eval[0]=-1.0;
j6eval[1]=-1.0;
j6eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
CheckValue<IkReal> x368 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x368.valid){
continue;
}
IkReal x367=((-1.0)*(x368.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x367;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x367;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j6eval[0]=1.0;
j6eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j6eval[2]=1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x369=((1.0)*new_r11);
CheckValue<IkReal> x370 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x369)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x370.valid){
continue;
}
CheckValue<IkReal> x371=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x371.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x370.value)+(((1.5707963267949)*(x371.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x372=IKcos(j6);
IkReal x373=IKsin(j6);
IkReal x374=(gconst1*x372);
IkReal x375=(gconst2*x372);
IkReal x376=((1.0)*x373);
IkReal x377=(gconst2*x376);
evalcond[0]=(gconst1+((new_r01*x372))+((new_r11*x373)));
evalcond[1]=(x375+((gconst1*x373))+new_r11);
evalcond[2]=((((-1.0)*x377))+x374);
evalcond[3]=(gconst2+(((-1.0)*new_r01*x376))+((new_r11*x372)));
evalcond[4]=((((-1.0)*x377))+x374+new_r01);
evalcond[5]=((((-1.0)*x375))+(((-1.0)*gconst1*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x378=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x378.valid){
continue;
}
CheckValue<IkReal> x379 = IKatan2WithCheck(IkReal((gconst1*new_r11)),IkReal((gconst2*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x379.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x378.value)))+(x379.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x380=IKcos(j6);
IkReal x381=IKsin(j6);
IkReal x382=(gconst1*x380);
IkReal x383=(gconst2*x380);
IkReal x384=((1.0)*x381);
IkReal x385=(gconst2*x384);
evalcond[0]=(((new_r01*x380))+gconst1+((new_r11*x381)));
evalcond[1]=(x383+new_r11+((gconst1*x381)));
evalcond[2]=(x382+(((-1.0)*x385)));
evalcond[3]=(gconst2+(((-1.0)*new_r01*x384))+((new_r11*x380)));
evalcond[4]=(x382+(((-1.0)*x385))+new_r01);
evalcond[5]=((((-1.0)*x383))+(((-1.0)*gconst1*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x386=IKPowWithIntegerCheck(IKsign((((gconst1*new_r01))+(((-1.0)*gconst2*new_r11)))),-1);
if(!x386.valid){
continue;
}
CheckValue<IkReal> x387 = IKatan2WithCheck(IkReal((gconst1*gconst2)),IkReal(((-1.0)*(gconst1*gconst1))),IKFAST_ATAN2_MAGTHRESH);
if(!x387.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x386.value)))+(x387.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x388=IKcos(j6);
IkReal x389=IKsin(j6);
IkReal x390=(gconst1*x388);
IkReal x391=(gconst2*x388);
IkReal x392=((1.0)*x389);
IkReal x393=(gconst2*x392);
evalcond[0]=(((new_r01*x388))+gconst1+((new_r11*x389)));
evalcond[1]=(x391+new_r11+((gconst1*x389)));
evalcond[2]=((((-1.0)*x393))+x390);
evalcond[3]=((((-1.0)*new_r01*x392))+gconst2+((new_r11*x388)));
evalcond[4]=((((-1.0)*x393))+x390+new_r01);
evalcond[5]=((((-1.0)*x391))+(((-1.0)*gconst1*x392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x394=IKPowWithIntegerCheck(gconst2,-1);
if(!x394.valid){
continue;
}
cj6array[0]=(new_r00*(x394.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x395=IKsin(j6);
IkReal x396=IKcos(j6);
IkReal x397=((-1.0)*x395);
evalcond[0]=(new_r11*x395);
evalcond[1]=(new_r00*x397);
evalcond[2]=(gconst2*x397);
evalcond[3]=(((gconst2*x396))+new_r11);
evalcond[4]=(((new_r11*x396))+gconst2);
evalcond[5]=((((-1.0)*gconst2))+((new_r00*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
CheckValue<IkReal> x399 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x399.valid){
continue;
}
IkReal x398=((-1.0)*(x399.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x398;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x398;
IkReal gconst1=0;
IkReal x400 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x400)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x400,-0.5)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x402 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x402.valid){
continue;
}
IkReal x401=((-1.0)*(x402.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x401;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x401;
IkReal gconst1=0;
IkReal x403 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x403)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x403,-0.5)));
j6eval[0]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x405 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x405.valid){
continue;
}
IkReal x404=((-1.0)*(x405.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x404;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x404;
IkReal gconst1=0;
IkReal x406 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x406)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x406,-0.5)));
j6eval[0]=new_r10;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x407=IKPowWithIntegerCheck(new_r10,-1);
if(!x407.valid){
continue;
}
CheckValue<IkReal> x408=IKPowWithIntegerCheck(gconst2,-1);
if(!x408.valid){
continue;
}
if( IKabs((gconst2*(x407.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x408.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst2*(x407.value)))+IKsqr(((-1.0)*new_r11*(x408.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((gconst2*(x407.value)), ((-1.0)*new_r11*(x408.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x409=IKsin(j6);
IkReal x410=IKcos(j6);
IkReal x411=(gconst2*x410);
IkReal x412=(gconst2*x409);
evalcond[0]=(new_r11*x409);
evalcond[1]=(new_r10*x410);
evalcond[2]=((-1.0)*x412);
evalcond[3]=((-1.0)*x411);
evalcond[4]=(x411+new_r11);
evalcond[5]=(gconst2+((new_r11*x410)));
evalcond[6]=(new_r10+(((-1.0)*x412)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x413=IKPowWithIntegerCheck(gconst2,-1);
if(!x413.valid){
continue;
}
CheckValue<IkReal> x414=IKPowWithIntegerCheck(new_r11,-1);
if(!x414.valid){
continue;
}
if( IKabs((new_r10*(x413.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x414.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x413.value)))+IKsqr(((-1.0)*gconst2*(x414.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r10*(x413.value)), ((-1.0)*gconst2*(x414.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x415=IKsin(j6);
IkReal x416=IKcos(j6);
IkReal x417=(gconst2*x416);
IkReal x418=(gconst2*x415);
evalcond[0]=(new_r11*x415);
evalcond[1]=(new_r10*x416);
evalcond[2]=((-1.0)*x418);
evalcond[3]=((-1.0)*x417);
evalcond[4]=(x417+new_r11);
evalcond[5]=(gconst2+((new_r11*x416)));
evalcond[6]=(new_r10+(((-1.0)*x418)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x419 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x419.valid){
continue;
}
CheckValue<IkReal> x420=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x420.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x419.value)+(((1.5707963267949)*(x420.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x421=IKsin(j6);
IkReal x422=IKcos(j6);
IkReal x423=(gconst2*x422);
IkReal x424=(gconst2*x421);
evalcond[0]=(new_r11*x421);
evalcond[1]=(new_r10*x422);
evalcond[2]=((-1.0)*x424);
evalcond[3]=((-1.0)*x423);
evalcond[4]=(x423+new_r11);
evalcond[5]=(gconst2+((new_r11*x422)));
evalcond[6]=((((-1.0)*x424))+new_r10);
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
CheckValue<IkReal> x426 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x426.valid){
continue;
}
IkReal x425=((-1.0)*(x426.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x425;
new_r01=0;
IkReal gconst0=x425;
IkReal gconst1=0;
IkReal x427 = new_r11*new_r11;
if(IKabs(x427)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x427,-0.5)));
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x429 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x429.valid){
continue;
}
IkReal x428=((-1.0)*(x429.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x428;
new_r01=0;
IkReal gconst0=x428;
IkReal gconst1=0;
IkReal x430 = new_r11*new_r11;
if(IKabs(x430)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x430,-0.5)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x432 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x432.valid){
continue;
}
IkReal x431=((-1.0)*(x432.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x431;
new_r01=0;
IkReal gconst0=x431;
IkReal gconst1=0;
IkReal x433 = new_r11*new_r11;
if(IKabs(x433)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x433,-0.5)));
j6eval[0]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x434=IKPowWithIntegerCheck(gconst2,-1);
if(!x434.valid){
continue;
}
CheckValue<IkReal> x435=IKPowWithIntegerCheck(new_r11,-1);
if(!x435.valid){
continue;
}
if( IKabs((new_r10*(x434.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x435.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x434.value)))+IKsqr(((-1.0)*gconst2*(x435.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r10*(x434.value)), ((-1.0)*gconst2*(x435.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x436=IKsin(j6);
IkReal x437=IKcos(j6);
IkReal x438=(gconst2*x437);
IkReal x439=((1.0)*x436);
evalcond[0]=(new_r11*x436);
evalcond[1]=((-1.0)*gconst2*x436);
evalcond[2]=(x438+new_r11);
evalcond[3]=(gconst2+((new_r11*x437)));
evalcond[4]=((((-1.0)*gconst2*x439))+new_r10);
evalcond[5]=((((-1.0)*x438))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x439))+((new_r10*x437)));
evalcond[7]=(((new_r00*x437))+(((-1.0)*gconst2))+((new_r10*x436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x440 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x440.valid){
continue;
}
CheckValue<IkReal> x441=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x441.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x440.value)+(((1.5707963267949)*(x441.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x442=IKsin(j6);
IkReal x443=IKcos(j6);
IkReal x444=(gconst2*x443);
IkReal x445=((1.0)*x442);
evalcond[0]=(new_r11*x442);
evalcond[1]=((-1.0)*gconst2*x442);
evalcond[2]=(x444+new_r11);
evalcond[3]=(gconst2+((new_r11*x443)));
evalcond[4]=(new_r10+(((-1.0)*gconst2*x445)));
evalcond[5]=((((-1.0)*x444))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x445))+((new_r10*x443)));
evalcond[7]=(((new_r00*x443))+(((-1.0)*gconst2))+((new_r10*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x446=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x446.valid){
continue;
}
CheckValue<IkReal> x447 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x447.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x446.value)))+(x447.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x448=IKsin(j6);
IkReal x449=IKcos(j6);
IkReal x450=(gconst2*x449);
IkReal x451=((1.0)*x448);
evalcond[0]=(new_r11*x448);
evalcond[1]=((-1.0)*gconst2*x448);
evalcond[2]=(x450+new_r11);
evalcond[3]=(gconst2+((new_r11*x449)));
evalcond[4]=((((-1.0)*gconst2*x451))+new_r10);
evalcond[5]=((((-1.0)*x450))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x451))+((new_r10*x449)));
evalcond[7]=(((new_r00*x449))+(((-1.0)*gconst2))+((new_r10*x448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x452=((1.0)*new_r11);
CheckValue<IkReal> x453=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*x452))+((gconst1*new_r01)))),-1);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x452))+((gconst1*gconst2)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst1*gconst1))))),IKFAST_ATAN2_MAGTHRESH);
if(!x454.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x453.value)))+(x454.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x455=IKcos(j6);
IkReal x456=IKsin(j6);
IkReal x457=(gconst1*x455);
IkReal x458=(gconst2*x455);
IkReal x459=((1.0)*x456);
IkReal x460=(gconst2*x459);
evalcond[0]=(((new_r11*x456))+((new_r01*x455))+gconst1);
evalcond[1]=(((gconst1*x456))+x458+new_r11);
evalcond[2]=(((new_r10*x455))+gconst1+(((-1.0)*new_r00*x459)));
evalcond[3]=(((new_r11*x455))+gconst2+(((-1.0)*new_r01*x459)));
evalcond[4]=((((-1.0)*x460))+x457+new_r01);
evalcond[5]=((((-1.0)*x460))+x457+new_r10);
evalcond[6]=(((new_r10*x456))+((new_r00*x455))+(((-1.0)*gconst2)));
evalcond[7]=((((-1.0)*x458))+(((-1.0)*gconst1*x459))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x461=((1.0)*new_r11);
CheckValue<IkReal> x462 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x461)))),IkReal(((((-1.0)*gconst2*x461))+(((-1.0)*gconst1*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x462.valid){
continue;
}
CheckValue<IkReal> x463=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x463.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x462.value)+(((1.5707963267949)*(x463.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x464=IKcos(j6);
IkReal x465=IKsin(j6);
IkReal x466=(gconst1*x464);
IkReal x467=(gconst2*x464);
IkReal x468=((1.0)*x465);
IkReal x469=(gconst2*x468);
evalcond[0]=(((new_r11*x465))+((new_r01*x464))+gconst1);
evalcond[1]=(((gconst1*x465))+x467+new_r11);
evalcond[2]=(((new_r10*x464))+gconst1+(((-1.0)*new_r00*x468)));
evalcond[3]=(((new_r11*x464))+gconst2+(((-1.0)*new_r01*x468)));
evalcond[4]=((((-1.0)*x469))+x466+new_r01);
evalcond[5]=((((-1.0)*x469))+x466+new_r10);
evalcond[6]=(((new_r10*x465))+((new_r00*x464))+(((-1.0)*gconst2)));
evalcond[7]=((((-1.0)*x467))+(((-1.0)*gconst1*x468))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x470=((1.0)*gconst1);
CheckValue<IkReal> x471 = IKatan2WithCheck(IkReal((((gconst1*new_r01))+(((-1.0)*new_r10*x470)))),IkReal(((((-1.0)*new_r00*x470))+(((-1.0)*new_r11*x470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x471.valid){
continue;
}
CheckValue<IkReal> x472=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x472.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x471.value)+(((1.5707963267949)*(x472.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x473=IKcos(j6);
IkReal x474=IKsin(j6);
IkReal x475=(gconst1*x473);
IkReal x476=(gconst2*x473);
IkReal x477=((1.0)*x474);
IkReal x478=(gconst2*x477);
evalcond[0]=(((new_r01*x473))+gconst1+((new_r11*x474)));
evalcond[1]=(x476+new_r11+((gconst1*x474)));
evalcond[2]=(((new_r10*x473))+gconst1+(((-1.0)*new_r00*x477)));
evalcond[3]=(gconst2+((new_r11*x473))+(((-1.0)*new_r01*x477)));
evalcond[4]=((((-1.0)*x478))+x475+new_r01);
evalcond[5]=((((-1.0)*x478))+x475+new_r10);
evalcond[6]=(((new_r10*x474))+((new_r00*x473))+(((-1.0)*gconst2)));
evalcond[7]=((((-1.0)*x476))+(((-1.0)*gconst1*x477))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x480 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x480)==0){
continue;
}
IkReal x479=pow(x480,-0.5);
CheckValue<IkReal> x481 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x481.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x481.value))));
IkReal gconst4=((1.0)*new_r01*x479);
IkReal gconst5=((-1.0)*new_r11*x479);
CheckValue<IkReal> x482 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x482.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x482.value)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
CheckValue<IkReal> x485 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x485.valid){
continue;
}
IkReal x483=((1.0)*(x485.value));
IkReal x484=x479;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x483)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x483)));
IkReal gconst4=((1.0)*new_r01*x484);
IkReal gconst5=((-1.0)*new_r11*x484);
IkReal x486=new_r01*new_r01;
IkReal x487=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x488=x479;
IkReal x489=((1.0)*new_r01*x488);
j6eval[0]=x487;
j6eval[1]=IKsign(x487);
j6eval[2]=((IKabs(((((-1.0)*new_r11*x489))+(((-1.0)*new_r00*x489)))))+(IKabs(((((-1.0)*new_r10*x489))+((x486*x488))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
CheckValue<IkReal> x492 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x492.valid){
continue;
}
IkReal x490=((1.0)*(x492.value));
IkReal x491=x479;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x490)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x490)));
IkReal gconst4=((1.0)*new_r01*x491);
IkReal gconst5=((-1.0)*new_r11*x491);
IkReal x493=((new_r01*new_r01)+(new_r11*new_r11));
j6eval[0]=x493;
j6eval[1]=IKsign(x493);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
IkReal x494=((1.0)*(x496.value));
IkReal x495=x479;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x494)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x494)));
IkReal gconst4=((1.0)*new_r01*x495);
IkReal gconst5=((-1.0)*new_r11*x495);
IkReal x497=new_r01*new_r01;
IkReal x498=new_r11*new_r11;
IkReal x499=((1.0)*x497);
CheckValue<IkReal> x505=IKPowWithIntegerCheck((x498+x497),-1);
if(!x505.valid){
continue;
}
IkReal x500=x505.value;
CheckValue<IkReal> x506=IKPowWithIntegerCheck(((((-1.0)*x499))+(((-1.0)*x498))),-1);
if(!x506.valid){
continue;
}
IkReal x501=x506.value;
IkReal x502=((1.0)*x501);
IkReal x503=(new_r11*x502);
IkReal x504=(new_r01*x502);
j6eval[0]=((IKabs(((((-1.0)*new_r01*x503))+(((-1.0)*new_r01*x503*(new_r11*new_r11)))+(((-1.0)*x503*(new_r01*new_r01*new_r01))))))+(IKabs(((((-1.0)*x499*x500))+((x500*(x498*x498)))+((x497*x498*x500))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
CheckValue<IkReal> x508 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x508.valid){
continue;
}
IkReal x507=((1.0)*(x508.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x507)));
new_r11=0;
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x507)));
IkReal x509 = new_r01*new_r01;
if(IKabs(x509)==0){
continue;
}
IkReal gconst4=((1.0)*new_r01*(pow(x509,-0.5)));
IkReal gconst5=0;
j6eval[0]=new_r01;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x511 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x511.valid){
continue;
}
IkReal x510=((1.0)*(x511.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x510)));
new_r11=0;
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x510)));
IkReal x512 = new_r01*new_r01;
if(IKabs(x512)==0){
continue;
}
IkReal gconst4=((1.0)*new_r01*(pow(x512,-0.5)));
IkReal gconst5=0;
j6eval[0]=new_r10;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x513=IKPowWithIntegerCheck(gconst4,-1);
if(!x513.valid){
continue;
}
cj6array[0]=((-1.0)*new_r01*(x513.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x514=IKsin(j6);
IkReal x515=IKcos(j6);
evalcond[0]=(new_r10*x514);
evalcond[1]=(gconst4*x514);
evalcond[2]=((-1.0)*new_r01*x514);
evalcond[3]=(((new_r01*x515))+gconst4);
evalcond[4]=(((new_r10*x515))+gconst4);
evalcond[5]=(new_r10+((gconst4*x515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x516=IKPowWithIntegerCheck(new_r10,-1);
if(!x516.valid){
continue;
}
cj6array[0]=((-1.0)*gconst4*(x516.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x517=IKsin(j6);
IkReal x518=IKcos(j6);
IkReal x519=(gconst4*x518);
evalcond[0]=(new_r10*x517);
evalcond[1]=(gconst4*x517);
evalcond[2]=((-1.0)*new_r01*x517);
evalcond[3]=(((new_r01*x518))+gconst4);
evalcond[4]=(x519+new_r01);
evalcond[5]=(x519+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x520=IKPowWithIntegerCheck(new_r01,-1);
if(!x520.valid){
continue;
}
cj6array[0]=((-1.0)*gconst4*(x520.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x521=IKsin(j6);
IkReal x522=IKcos(j6);
IkReal x523=(gconst4*x522);
evalcond[0]=(new_r10*x521);
evalcond[1]=(gconst4*x521);
evalcond[2]=((-1.0)*new_r01*x521);
evalcond[3]=(gconst4+((new_r10*x522)));
evalcond[4]=(x523+new_r01);
evalcond[5]=(x523+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst4;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[4];
CheckValue<IkReal> x525 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x525.valid){
continue;
}
IkReal x524=((1.0)*(x525.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x524)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x524)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j6eval[0]=1.0;
j6eval[1]=1.0;
j6eval[2]=new_r01;
j6eval[3]=1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
CheckValue<IkReal> x527 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x527.valid){
continue;
}
IkReal x526=((1.0)*(x527.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x526)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x526)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j6eval[0]=-1.0;
j6eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j6eval[2]=-1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
CheckValue<IkReal> x529 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x529.valid){
continue;
}
IkReal x528=((1.0)*(x529.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x528)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x528)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j6eval[0]=1.0;
j6eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j6eval[2]=1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x530=((1.0)*new_r11);
CheckValue<IkReal> x531=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x531.valid){
continue;
}
CheckValue<IkReal> x532 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x530)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x532.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x531.value)))+(x532.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x533=IKsin(j6);
IkReal x534=IKcos(j6);
IkReal x535=(gconst4*x534);
IkReal x536=(gconst4*x533);
IkReal x537=((1.0)*x533);
IkReal x538=(gconst5*x534);
IkReal x539=(gconst5*x537);
evalcond[0]=(((new_r01*x534))+gconst4+((new_r11*x533)));
evalcond[1]=(x536+x538+new_r11);
evalcond[2]=((((-1.0)*x539))+x535);
evalcond[3]=(gconst5+((new_r11*x534))+(((-1.0)*new_r01*x537)));
evalcond[4]=((((-1.0)*x539))+x535+new_r01);
evalcond[5]=((((-1.0)*x538))+(((-1.0)*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x540 = IKatan2WithCheck(IkReal((gconst4*new_r11)),IkReal((gconst5*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x540.valid){
continue;
}
CheckValue<IkReal> x541=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x541.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x540.value)+(((1.5707963267949)*(x541.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x542=IKsin(j6);
IkReal x543=IKcos(j6);
IkReal x544=(gconst4*x543);
IkReal x545=(gconst4*x542);
IkReal x546=((1.0)*x542);
IkReal x547=(gconst5*x543);
IkReal x548=(gconst5*x546);
evalcond[0]=(gconst4+((new_r11*x542))+((new_r01*x543)));
evalcond[1]=(x545+x547+new_r11);
evalcond[2]=((((-1.0)*x548))+x544);
evalcond[3]=(gconst5+((new_r11*x543))+(((-1.0)*new_r01*x546)));
evalcond[4]=((((-1.0)*x548))+x544+new_r01);
evalcond[5]=((((-1.0)*x547))+(((-1.0)*x545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x549 = IKatan2WithCheck(IkReal((gconst4*gconst5)),IkReal(((-1.0)*(gconst4*gconst4))),IKFAST_ATAN2_MAGTHRESH);
if(!x549.valid){
continue;
}
CheckValue<IkReal> x550=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*new_r11)))),-1);
if(!x550.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x549.value)+(((1.5707963267949)*(x550.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x551=IKsin(j6);
IkReal x552=IKcos(j6);
IkReal x553=(gconst4*x552);
IkReal x554=(gconst4*x551);
IkReal x555=((1.0)*x551);
IkReal x556=(gconst5*x552);
IkReal x557=(gconst5*x555);
evalcond[0]=(((new_r11*x551))+gconst4+((new_r01*x552)));
evalcond[1]=(x556+x554+new_r11);
evalcond[2]=((((-1.0)*x557))+x553);
evalcond[3]=(((new_r11*x552))+gconst5+(((-1.0)*new_r01*x555)));
evalcond[4]=((((-1.0)*x557))+x553+new_r01);
evalcond[5]=((((-1.0)*x556))+(((-1.0)*x554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x558=IKPowWithIntegerCheck(gconst5,-1);
if(!x558.valid){
continue;
}
cj6array[0]=(new_r00*(x558.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x559=IKsin(j6);
IkReal x560=IKcos(j6);
IkReal x561=((-1.0)*x559);
evalcond[0]=(new_r11*x559);
evalcond[1]=(new_r00*x561);
evalcond[2]=(gconst5*x561);
evalcond[3]=(((gconst5*x560))+new_r11);
evalcond[4]=(gconst5+((new_r11*x560)));
evalcond[5]=(((new_r00*x560))+(((-1.0)*gconst5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
CheckValue<IkReal> x563 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x563.valid){
continue;
}
IkReal x562=((1.0)*(x563.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x562)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x562)));
IkReal gconst4=0;
IkReal x564 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x564)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x564,-0.5)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x566 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x566.valid){
continue;
}
IkReal x565=((1.0)*(x566.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x565)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x565)));
IkReal gconst4=0;
IkReal x567 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x567)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x567,-0.5)));
j6eval[0]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x569 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x569.valid){
continue;
}
IkReal x568=((1.0)*(x569.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x568)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x568)));
IkReal gconst4=0;
IkReal x570 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x570)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x570,-0.5)));
j6eval[0]=new_r10;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x571=IKPowWithIntegerCheck(new_r10,-1);
if(!x571.valid){
continue;
}
CheckValue<IkReal> x572=IKPowWithIntegerCheck(gconst5,-1);
if(!x572.valid){
continue;
}
if( IKabs((gconst5*(x571.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x572.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst5*(x571.value)))+IKsqr(((-1.0)*new_r11*(x572.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((gconst5*(x571.value)), ((-1.0)*new_r11*(x572.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x573=IKsin(j6);
IkReal x574=IKcos(j6);
IkReal x575=((1.0)*gconst5);
IkReal x576=((-1.0)*gconst5);
evalcond[0]=(new_r11*x573);
evalcond[1]=(new_r10*x574);
evalcond[2]=(x573*x576);
evalcond[3]=(x574*x576);
evalcond[4]=(((gconst5*x574))+new_r11);
evalcond[5]=(((new_r11*x574))+gconst5);
evalcond[6]=((((-1.0)*x573*x575))+new_r10);
evalcond[7]=(((new_r10*x573))+(((-1.0)*x575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x577=IKPowWithIntegerCheck(gconst5,-1);
if(!x577.valid){
continue;
}
CheckValue<IkReal> x578=IKPowWithIntegerCheck(new_r11,-1);
if(!x578.valid){
continue;
}
if( IKabs((new_r10*(x577.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x578.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x577.value)))+IKsqr(((-1.0)*gconst5*(x578.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r10*(x577.value)), ((-1.0)*gconst5*(x578.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x579=IKsin(j6);
IkReal x580=IKcos(j6);
IkReal x581=((1.0)*gconst5);
IkReal x582=((-1.0)*gconst5);
evalcond[0]=(new_r11*x579);
evalcond[1]=(new_r10*x580);
evalcond[2]=(x579*x582);
evalcond[3]=(x580*x582);
evalcond[4]=(((gconst5*x580))+new_r11);
evalcond[5]=(gconst5+((new_r11*x580)));
evalcond[6]=((((-1.0)*x579*x581))+new_r10);
evalcond[7]=(((new_r10*x579))+(((-1.0)*x581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x584.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x583.value)+(((1.5707963267949)*(x584.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x585=IKsin(j6);
IkReal x586=IKcos(j6);
IkReal x587=((1.0)*gconst5);
IkReal x588=((-1.0)*gconst5);
evalcond[0]=(new_r11*x585);
evalcond[1]=(new_r10*x586);
evalcond[2]=(x585*x588);
evalcond[3]=(x586*x588);
evalcond[4]=(((gconst5*x586))+new_r11);
evalcond[5]=(gconst5+((new_r11*x586)));
evalcond[6]=((((-1.0)*x585*x587))+new_r10);
evalcond[7]=((((-1.0)*x587))+((new_r10*x585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
CheckValue<IkReal> x590 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x590.valid){
continue;
}
IkReal x589=((1.0)*(x590.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x589)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x589)));
IkReal gconst4=0;
IkReal x591 = new_r11*new_r11;
if(IKabs(x591)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x591,-0.5)));
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x593 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x593.valid){
continue;
}
IkReal x592=((1.0)*(x593.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x592)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x592)));
IkReal gconst4=0;
IkReal x594 = new_r11*new_r11;
if(IKabs(x594)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x594,-0.5)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
CheckValue<IkReal> x596 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x596.valid){
continue;
}
IkReal x595=((1.0)*(x596.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x595)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x595)));
IkReal gconst4=0;
IkReal x597 = new_r11*new_r11;
if(IKabs(x597)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x597,-0.5)));
j6eval[0]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x598=IKPowWithIntegerCheck(gconst5,-1);
if(!x598.valid){
continue;
}
CheckValue<IkReal> x599=IKPowWithIntegerCheck(new_r11,-1);
if(!x599.valid){
continue;
}
if( IKabs((new_r10*(x598.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x599.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x598.value)))+IKsqr(((-1.0)*gconst5*(x599.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r10*(x598.value)), ((-1.0)*gconst5*(x599.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x600=IKsin(j6);
IkReal x601=IKcos(j6);
IkReal x602=((1.0)*gconst5);
evalcond[0]=(new_r11*x600);
evalcond[1]=((-1.0)*gconst5*x600);
evalcond[2]=(((gconst5*x601))+new_r11);
evalcond[3]=(gconst5+((new_r11*x601)));
evalcond[4]=((((-1.0)*x600*x602))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*x601*x602)));
evalcond[6]=((((-1.0)*new_r00*x600))+((new_r10*x601)));
evalcond[7]=(((new_r10*x600))+((new_r00*x601))+(((-1.0)*x602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
CheckValue<IkReal> x604=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x604.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x603.value)+(((1.5707963267949)*(x604.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x605=IKsin(j6);
IkReal x606=IKcos(j6);
IkReal x607=((1.0)*gconst5);
evalcond[0]=(new_r11*x605);
evalcond[1]=((-1.0)*gconst5*x605);
evalcond[2]=(((gconst5*x606))+new_r11);
evalcond[3]=(gconst5+((new_r11*x606)));
evalcond[4]=((((-1.0)*x605*x607))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*x606*x607)));
evalcond[6]=((((-1.0)*new_r00*x605))+((new_r10*x606)));
evalcond[7]=(((new_r10*x605))+((new_r00*x606))+(((-1.0)*x607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x608 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x608.valid){
continue;
}
CheckValue<IkReal> x609=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x609.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x608.value)+(((1.5707963267949)*(x609.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x610=IKsin(j6);
IkReal x611=IKcos(j6);
IkReal x612=((1.0)*gconst5);
evalcond[0]=(new_r11*x610);
evalcond[1]=((-1.0)*gconst5*x610);
evalcond[2]=(((gconst5*x611))+new_r11);
evalcond[3]=(gconst5+((new_r11*x611)));
evalcond[4]=((((-1.0)*x610*x612))+new_r10);
evalcond[5]=((((-1.0)*x611*x612))+new_r00);
evalcond[6]=(((new_r10*x611))+(((-1.0)*new_r00*x610)));
evalcond[7]=(((new_r10*x610))+(((-1.0)*x612))+((new_r00*x611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x613=((1.0)*new_r11);
CheckValue<IkReal> x614=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*x613)))),-1);
if(!x614.valid){
continue;
}
CheckValue<IkReal> x615 = IKatan2WithCheck(IkReal((((gconst4*gconst5))+(((-1.0)*new_r01*x613)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst4*gconst4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x615.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x614.value)))+(x615.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x616=IKsin(j6);
IkReal x617=IKcos(j6);
IkReal x618=((1.0)*gconst5);
IkReal x619=(gconst4*x617);
IkReal x620=(gconst4*x616);
IkReal x621=((1.0)*x616);
IkReal x622=(x616*x618);
evalcond[0]=(gconst4+((new_r11*x616))+((new_r01*x617)));
evalcond[1]=(((gconst5*x617))+x620+new_r11);
evalcond[2]=((((-1.0)*new_r00*x621))+gconst4+((new_r10*x617)));
evalcond[3]=((((-1.0)*new_r01*x621))+gconst5+((new_r11*x617)));
evalcond[4]=((((-1.0)*x622))+x619+new_r01);
evalcond[5]=((((-1.0)*x622))+x619+new_r10);
evalcond[6]=(((new_r10*x616))+(((-1.0)*x618))+((new_r00*x617)));
evalcond[7]=((((-1.0)*x617*x618))+(((-1.0)*x620))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x623=((1.0)*new_r11);
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x623)))),IkReal(((((-1.0)*gconst5*x623))+(((-1.0)*gconst4*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
CheckValue<IkReal> x625=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x625.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x624.value)+(((1.5707963267949)*(x625.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x626=IKsin(j6);
IkReal x627=IKcos(j6);
IkReal x628=((1.0)*gconst5);
IkReal x629=(gconst4*x627);
IkReal x630=(gconst4*x626);
IkReal x631=((1.0)*x626);
IkReal x632=(x626*x628);
evalcond[0]=(gconst4+((new_r01*x627))+((new_r11*x626)));
evalcond[1]=(((gconst5*x627))+x630+new_r11);
evalcond[2]=((((-1.0)*new_r00*x631))+gconst4+((new_r10*x627)));
evalcond[3]=((((-1.0)*new_r01*x631))+gconst5+((new_r11*x627)));
evalcond[4]=((((-1.0)*x632))+x629+new_r01);
evalcond[5]=((((-1.0)*x632))+x629+new_r10);
evalcond[6]=((((-1.0)*x628))+((new_r00*x627))+((new_r10*x626)));
evalcond[7]=((((-1.0)*x627*x628))+(((-1.0)*x630))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x633=((1.0)*gconst4);
CheckValue<IkReal> x634 = IKatan2WithCheck(IkReal((((gconst4*new_r01))+(((-1.0)*new_r10*x633)))),IkReal(((((-1.0)*new_r00*x633))+(((-1.0)*new_r11*x633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
CheckValue<IkReal> x635=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x635.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x634.value)+(((1.5707963267949)*(x635.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x636=IKsin(j6);
IkReal x637=IKcos(j6);
IkReal x638=((1.0)*gconst5);
IkReal x639=(gconst4*x637);
IkReal x640=(gconst4*x636);
IkReal x641=((1.0)*x636);
IkReal x642=(x636*x638);
evalcond[0]=(gconst4+((new_r01*x637))+((new_r11*x636)));
evalcond[1]=(((gconst5*x637))+x640+new_r11);
evalcond[2]=(gconst4+(((-1.0)*new_r00*x641))+((new_r10*x637)));
evalcond[3]=(gconst5+(((-1.0)*new_r01*x641))+((new_r11*x637)));
evalcond[4]=((((-1.0)*x642))+x639+new_r01);
evalcond[5]=((((-1.0)*x642))+x639+new_r10);
evalcond[6]=((((-1.0)*x638))+((new_r00*x637))+((new_r10*x636)));
evalcond[7]=((((-1.0)*x640))+(((-1.0)*x637*x638))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
new_r01=0;
new_r11=0;
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x644 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x644.valid){
continue;
}
IkReal x643=x644.value;
j6array[0]=((-1.0)*x643);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x643)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j6))))+((new_r10*(IKcos(j6)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x645=IKcos(j6);
IkReal x646=IKsin(j6);
IkReal x647=((1.0)*x646);
evalcond[0]=(x645+new_r11);
evalcond[1]=((((-1.0)*x647))+new_r01);
evalcond[2]=((((-1.0)*x647))+new_r10);
evalcond[3]=((((-1.0)*x645))+new_r00);
evalcond[4]=(((new_r11*x646))+((new_r01*x645)));
evalcond[5]=((-1.0)+((new_r10*x646))+((new_r00*x645)));
evalcond[6]=(((new_r10*x645))+(((-1.0)*new_r00*x647)));
evalcond[7]=((1.0)+((new_r11*x645))+(((-1.0)*new_r01*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x648=IKsin(j6);
IkReal x649=IKcos(j6);
IkReal x650=((1.0)*x648);
evalcond[0]=(x648+new_r01);
evalcond[1]=(x648+new_r10);
evalcond[2]=(x649+new_r00);
evalcond[3]=((((-1.0)*x649))+new_r11);
evalcond[4]=(((new_r11*x648))+((new_r01*x649)));
evalcond[5]=((1.0)+((new_r10*x648))+((new_r00*x649)));
evalcond[6]=((((-1.0)*new_r00*x650))+((new_r10*x649)));
evalcond[7]=((-1.0)+((new_r11*x649))+(((-1.0)*new_r01*x650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
new_r11=0;
new_r00=0;
j6eval[0]=new_r01;
j6eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j6eval[2]=IKsign(new_r01);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
new_r11=0;
new_r00=0;
j6eval[0]=new_r01;
j6eval[1]=new_r10;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x651=IKPowWithIntegerCheck(new_r01,-1);
if(!x651.valid){
continue;
}
CheckValue<IkReal> x652=IKPowWithIntegerCheck(new_r10,-1);
if(!x652.valid){
continue;
}
if( IKabs((cj8*(x651.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj8*(x652.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj8*(x651.value)))+IKsqr(((-1.0)*sj8*(x652.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((cj8*(x651.value)), ((-1.0)*sj8*(x652.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[7];
IkReal x653=IKcos(j6);
IkReal x654=IKsin(j6);
IkReal x655=(sj8*x653);
IkReal x656=((1.0)*x654);
IkReal x657=(cj8*x656);
evalcond[0]=(sj8+((new_r01*x653)));
evalcond[1]=(sj8+((new_r10*x653)));
evalcond[2]=(cj8+(((-1.0)*new_r01*x656)));
evalcond[3]=(((new_r10*x654))+(((-1.0)*cj8)));
evalcond[4]=(((sj8*x654))+((cj8*x653)));
evalcond[5]=((((-1.0)*x657))+x655+new_r01);
evalcond[6]=((((-1.0)*x657))+x655+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x658=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x658.valid){
continue;
}
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(cj8),IkReal(((-1.0)*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x658.value)))+(x659.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[7];
IkReal x660=IKcos(j6);
IkReal x661=IKsin(j6);
IkReal x662=(sj8*x660);
IkReal x663=((1.0)*x661);
IkReal x664=(cj8*x663);
evalcond[0]=(sj8+((new_r01*x660)));
evalcond[1]=(sj8+((new_r10*x660)));
evalcond[2]=(cj8+(((-1.0)*new_r01*x663)));
evalcond[3]=(((new_r10*x661))+(((-1.0)*cj8)));
evalcond[4]=(((sj8*x661))+((cj8*x660)));
evalcond[5]=((((-1.0)*x664))+x662+new_r01);
evalcond[6]=((((-1.0)*x664))+x662+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x666 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x666.valid){
continue;
}
IkReal x665=x666.value;
j6array[0]=((-1.0)*x665);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x665)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j6))))+((new_r10*(IKcos(j6)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x668 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x668.valid){
continue;
}
IkReal x667=x668.value;
j6array[0]=((-1.0)*x667);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x667)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j6))))+(((-1.0)*new_r01*(IKsin(j6)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
new_r01=0;
new_r10=0;
j6eval[0]=new_r11;
j6eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j6eval[2]=IKsign(new_r11);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
new_r01=0;
new_r10=0;
j6eval[0]=new_r00;
j6eval[1]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
new_r01=0;
new_r10=0;
j6eval[0]=new_r11;
j6eval[1]=cj8;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
sj6array[0]=new_r00;
if( sj6array[0] >= -1-IKFAST_SINCOS_THRESH && sj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x669=IKcos(j6);
IkReal x670=IKsin(j6);
evalcond[0]=x669;
evalcond[1]=(new_r00*x669);
evalcond[2]=(x670+new_r11);
evalcond[3]=(new_r11*x669);
evalcond[4]=((1.0)+((new_r11*x670)));
evalcond[5]=((1.0)+(((-1.0)*new_r00*x670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
sj6array[0]=new_r11;
if( sj6array[0] >= -1-IKFAST_SINCOS_THRESH && sj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x671=IKcos(j6);
IkReal x672=IKsin(j6);
evalcond[0]=(new_r00*x671);
evalcond[1]=(new_r11*x671);
evalcond[2]=((-1.0)*x671);
evalcond[3]=(x672+new_r00);
evalcond[4]=((-1.0)+((new_r11*x672)));
evalcond[5]=((-1.0)+(((-1.0)*new_r00*x672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x674=IKPowWithIntegerCheck(new_r11,-1);
if(!x674.valid){
continue;
}
IkReal x673=x674.value;
CheckValue<IkReal> x675=IKPowWithIntegerCheck(cj8,-1);
if(!x675.valid){
continue;
}
CheckValue<IkReal> x676=IKPowWithIntegerCheck(x673,-2);
if(!x676.valid){
continue;
}
if( IKabs(((-1.0)*sj8*x673)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x673*(x675.value)*(((1.0)+(((-1.0)*(x676.value)))+(((-1.0)*(cj8*cj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj8*x673))+IKsqr((x673*(x675.value)*(((1.0)+(((-1.0)*(x676.value)))+(((-1.0)*(cj8*cj8)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*sj8*x673), (x673*(x675.value)*(((1.0)+(((-1.0)*(x676.value)))+(((-1.0)*(cj8*cj8)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[7];
IkReal x677=IKsin(j6);
IkReal x678=IKcos(j6);
IkReal x679=((1.0)*cj8);
IkReal x680=((1.0)*x677);
evalcond[0]=(((new_r11*x677))+sj8);
evalcond[1]=(((new_r11*x678))+cj8);
evalcond[2]=(sj8+(((-1.0)*new_r00*x680)));
evalcond[3]=(((new_r00*x678))+(((-1.0)*x679)));
evalcond[4]=(((cj8*x678))+new_r11+((sj8*x677)));
evalcond[5]=((((-1.0)*x677*x679))+((sj8*x678)));
evalcond[6]=((((-1.0)*x678*x679))+new_r00+(((-1.0)*sj8*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x681=IKPowWithIntegerCheck(new_r00,-1);
if(!x681.valid){
continue;
}
CheckValue<IkReal> x682=IKPowWithIntegerCheck(new_r11,-1);
if(!x682.valid){
continue;
}
if( IKabs((sj8*(x681.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*(x682.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj8*(x681.value)))+IKsqr(((-1.0)*cj8*(x682.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((sj8*(x681.value)), ((-1.0)*cj8*(x682.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[7];
IkReal x683=IKsin(j6);
IkReal x684=IKcos(j6);
IkReal x685=((1.0)*cj8);
IkReal x686=((1.0)*x683);
evalcond[0]=(sj8+((new_r11*x683)));
evalcond[1]=(cj8+((new_r11*x684)));
evalcond[2]=(sj8+(((-1.0)*new_r00*x686)));
evalcond[3]=((((-1.0)*x685))+((new_r00*x684)));
evalcond[4]=(((sj8*x683))+new_r11+((cj8*x684)));
evalcond[5]=(((sj8*x684))+(((-1.0)*x683*x685)));
evalcond[6]=((((-1.0)*x684*x685))+new_r00+(((-1.0)*sj8*x686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x687=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x687.valid){
continue;
}
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal(((-1.0)*sj8)),IkReal(((-1.0)*cj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x687.value)))+(x688.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[7];
IkReal x689=IKsin(j6);
IkReal x690=IKcos(j6);
IkReal x691=((1.0)*cj8);
IkReal x692=((1.0)*x689);
evalcond[0]=(sj8+((new_r11*x689)));
evalcond[1]=(cj8+((new_r11*x690)));
evalcond[2]=(sj8+(((-1.0)*new_r00*x692)));
evalcond[3]=((((-1.0)*x691))+((new_r00*x690)));
evalcond[4]=(((cj8*x690))+((sj8*x689))+new_r11);
evalcond[5]=(((sj8*x690))+(((-1.0)*x689*x691)));
evalcond[6]=((((-1.0)*x690*x691))+(((-1.0)*sj8*x692))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x693 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj8*cj8))),IkReal(((((-1.0)*cj8*sj8))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x693.valid){
continue;
}
CheckValue<IkReal> x694=IKPowWithIntegerCheck(IKsign((((new_r11*sj8))+((cj8*new_r01)))),-1);
if(!x694.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x693.value)+(((1.5707963267949)*(x694.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x695=IKcos(j6);
IkReal x696=IKsin(j6);
IkReal x697=(sj8*x695);
IkReal x698=((1.0)*x696);
IkReal x699=(cj8*x695);
IkReal x700=(cj8*x698);
evalcond[0]=(sj8+((new_r11*x696))+((new_r01*x695)));
evalcond[1]=(((sj8*x696))+x699+new_r11);
evalcond[2]=(sj8+((new_r10*x695))+(((-1.0)*new_r00*x698)));
evalcond[3]=(cj8+(((-1.0)*new_r01*x698))+((new_r11*x695)));
evalcond[4]=((((-1.0)*x700))+x697+new_r01);
evalcond[5]=((((-1.0)*x700))+x697+new_r10);
evalcond[6]=(((new_r10*x696))+((new_r00*x695))+(((-1.0)*cj8)));
evalcond[7]=((((-1.0)*sj8*x698))+new_r00+(((-1.0)*x699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x701=((1.0)*new_r11);
CheckValue<IkReal> x702 = IKatan2WithCheck(IkReal(((((-1.0)*sj8*x701))+((cj8*new_r01)))),IkReal(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x702.valid){
continue;
}
CheckValue<IkReal> x703=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x703.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x702.value)+(((1.5707963267949)*(x703.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x704=IKcos(j6);
IkReal x705=IKsin(j6);
IkReal x706=(sj8*x704);
IkReal x707=((1.0)*x705);
IkReal x708=(cj8*x704);
IkReal x709=(cj8*x707);
evalcond[0]=(sj8+((new_r01*x704))+((new_r11*x705)));
evalcond[1]=(x708+new_r11+((sj8*x705)));
evalcond[2]=(sj8+((new_r10*x704))+(((-1.0)*new_r00*x707)));
evalcond[3]=(cj8+((new_r11*x704))+(((-1.0)*new_r01*x707)));
evalcond[4]=((((-1.0)*x709))+x706+new_r01);
evalcond[5]=((((-1.0)*x709))+x706+new_r10);
evalcond[6]=(((new_r00*x704))+((new_r10*x705))+(((-1.0)*cj8)));
evalcond[7]=((((-1.0)*sj8*x707))+(((-1.0)*x708))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x710=((1.0)*sj8);
CheckValue<IkReal> x711 = IKatan2WithCheck(IkReal((((new_r01*sj8))+(((-1.0)*new_r10*x710)))),IkReal(((((-1.0)*new_r11*x710))+(((-1.0)*new_r00*x710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x711.valid){
continue;
}
CheckValue<IkReal> x712=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x712.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x711.value)+(((1.5707963267949)*(x712.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x713=IKcos(j6);
IkReal x714=IKsin(j6);
IkReal x715=(sj8*x713);
IkReal x716=((1.0)*x714);
IkReal x717=(cj8*x713);
IkReal x718=(cj8*x716);
evalcond[0]=(sj8+((new_r01*x713))+((new_r11*x714)));
evalcond[1]=(x717+new_r11+((sj8*x714)));
evalcond[2]=(sj8+((new_r10*x713))+(((-1.0)*new_r00*x716)));
evalcond[3]=(cj8+((new_r11*x713))+(((-1.0)*new_r01*x716)));
evalcond[4]=((((-1.0)*x718))+x715+new_r01);
evalcond[5]=((((-1.0)*x718))+x715+new_r10);
evalcond[6]=(((new_r00*x713))+((new_r10*x714))+(((-1.0)*cj8)));
evalcond[7]=((((-1.0)*sj8*x716))+(((-1.0)*x717))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x719=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x719))+(((-1.0)*new_r11*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj8*x719))+((cj8*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x719))+(((-1.0)*new_r11*sj8))))+IKsqr(((((-1.0)*sj8*x719))+((cj8*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj8*x719))+(((-1.0)*new_r11*sj8))), ((((-1.0)*sj8*x719))+((cj8*new_r11))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x720=IKsin(j6);
IkReal x721=IKcos(j6);
IkReal x722=((1.0)*cj8);
IkReal x723=((1.0)*sj8);
IkReal x724=(sj8*x720);
IkReal x725=((1.0)*x720);
IkReal x726=(x721*x722);
evalcond[0]=(sj8+((new_r01*x721))+((new_r11*x720)));
evalcond[1]=(((sj8*x721))+new_r01+((cj8*x720)));
evalcond[2]=((((-1.0)*x726))+x724+new_r11);
evalcond[3]=((((-1.0)*x726))+x724+new_r00);
evalcond[4]=(((new_r00*x721))+(((-1.0)*x722))+((new_r10*x720)));
evalcond[5]=((((-1.0)*x721*x723))+(((-1.0)*x720*x722))+new_r10);
evalcond[6]=((((-1.0)*x723))+(((-1.0)*new_r00*x725))+((new_r10*x721)));
evalcond[7]=((((-1.0)*x722))+((new_r11*x721))+(((-1.0)*new_r01*x725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x728 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
IkReal x727=x728.value;
j6array[0]=((-1.0)*x727);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x727)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x729=IKsin(j6);
IkReal x730=IKcos(j6);
IkReal x731=((1.0)*x729);
IkReal x732=(new_r11*x730);
evalcond[0]=(((new_r01*x730))+((new_r11*x729)));
evalcond[1]=(((new_r00*x730))+((new_r10*x729)));
evalcond[2]=((((-1.0)*new_r00*x731))+((new_r10*x730)));
evalcond[3]=(x732+(((-1.0)*new_r01*x731)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x731))+((new_r22*x732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x734 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x734.valid){
continue;
}
IkReal x733=x734.value;
j6array[0]=((-1.0)*x733);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x733)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x735=IKcos(j6);
IkReal x736=IKsin(j6);
IkReal x737=((1.0)*x736);
IkReal x738=(new_r10*x735);
IkReal x739=(new_r11*x735);
evalcond[0]=(((new_r01*x735))+((new_r11*x736)));
evalcond[1]=(x738+(((-1.0)*new_r00*x737)));
evalcond[2]=(x739+(((-1.0)*new_r01*x737)));
evalcond[3]=(((new_r22*x738))+(((-1.0)*new_r00*new_r22*x737)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x737))+((new_r22*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
IkReal x740=x741.value;
j6array[0]=((-1.0)*x740);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x740)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x742=IKcos(j6);
IkReal x743=IKsin(j6);
IkReal x744=((1.0)*x743);
IkReal x745=(new_r10*x742);
IkReal x746=(new_r11*x742);
evalcond[0]=(((new_r10*x743))+((new_r00*x742)));
evalcond[1]=((((-1.0)*new_r00*x744))+x745);
evalcond[2]=((((-1.0)*new_r01*x744))+x746);
evalcond[3]=((((-1.0)*new_r00*new_r22*x744))+((new_r22*x745)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x744))+((new_r22*x746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x748=IKPowWithIntegerCheck(cj7,-1);
if(!x748.valid){
continue;
}
IkReal x747=x748.value;
CheckValue<IkReal> x749=IKPowWithIntegerCheck(new_r11,-1);
if(!x749.valid){
continue;
}
if( IKabs((x747*(x749.value)*((((new_r01*new_r12))+(((-1.0)*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x747)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x747*(x749.value)*((((new_r01*new_r12))+(((-1.0)*cj7*sj8))))))+IKsqr(((-1.0)*new_r12*x747))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x747*(x749.value)*((((new_r01*new_r12))+(((-1.0)*cj7*sj8))))), ((-1.0)*new_r12*x747));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x750=IKcos(j6);
IkReal x751=IKsin(j6);
IkReal x752=((1.0)*cj8);
IkReal x753=(sj7*sj8);
IkReal x754=(cj8*sj7);
IkReal x755=((1.0)*sj7);
IkReal x756=(new_r02*x751);
IkReal x757=(cj7*x750);
IkReal x758=((1.0)*x751);
IkReal x759=(new_r12*x750);
IkReal x760=(new_r11*x750);
IkReal x761=((1.0)*x750);
IkReal x762=(sj7*x751);
evalcond[0]=(x757+new_r12);
evalcond[1]=((((-1.0)*cj7*x758))+new_r02);
evalcond[2]=(((new_r12*x751))+((new_r02*x750)));
evalcond[3]=(sj8+((new_r11*x751))+((new_r01*x750)));
evalcond[4]=(cj7+(((-1.0)*x756))+x759);
evalcond[5]=(((sj8*x751))+new_r11+((x750*x754)));
evalcond[6]=(((new_r00*x750))+((new_r10*x751))+(((-1.0)*x752)));
evalcond[7]=((((-1.0)*x752*x762))+((sj8*x750))+new_r01);
evalcond[8]=((((-1.0)*x751*x752))+new_r10+((x750*x753)));
evalcond[9]=((((-1.0)*new_r00*x758))+((new_r10*x750))+x753);
evalcond[10]=((((-1.0)*new_r01*x758))+x754+x760);
evalcond[11]=((((-1.0)*x750*x752))+(((-1.0)*x753*x758))+new_r00);
evalcond[12]=(((new_r20*sj7))+((new_r10*x757))+(((-1.0)*cj7*new_r00*x758)));
evalcond[13]=((((-1.0)*cj7*new_r01*x758))+((new_r11*x757))+((new_r21*sj7)));
evalcond[14]=((((-1.0)*x755*x759))+((cj7*new_r22))+((sj7*x756)));
evalcond[15]=((1.0)+(((-1.0)*cj7*x756))+((new_r22*sj7))+((new_r12*x757)));
evalcond[16]=((((-1.0)*sj8))+((new_r00*x762))+((cj7*new_r20))+(((-1.0)*new_r10*x750*x755)));
evalcond[17]=(((new_r01*x762))+(((-1.0)*x755*x760))+((cj7*new_r21))+(((-1.0)*x752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x763=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x763.valid){
continue;
}
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x763.value)))+(x764.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x765=IKcos(j6);
IkReal x766=IKsin(j6);
IkReal x767=((1.0)*cj8);
IkReal x768=(sj7*sj8);
IkReal x769=(cj8*sj7);
IkReal x770=((1.0)*sj7);
IkReal x771=(new_r02*x766);
IkReal x772=(cj7*x765);
IkReal x773=((1.0)*x766);
IkReal x774=(new_r12*x765);
IkReal x775=(new_r11*x765);
IkReal x776=((1.0)*x765);
IkReal x777=(sj7*x766);
evalcond[0]=(x772+new_r12);
evalcond[1]=((((-1.0)*cj7*x773))+new_r02);
evalcond[2]=(((new_r12*x766))+((new_r02*x765)));
evalcond[3]=(sj8+((new_r11*x766))+((new_r01*x765)));
evalcond[4]=(cj7+x774+(((-1.0)*x771)));
evalcond[5]=(((sj8*x766))+((x765*x769))+new_r11);
evalcond[6]=(((new_r10*x766))+(((-1.0)*x767))+((new_r00*x765)));
evalcond[7]=(((sj8*x765))+(((-1.0)*x767*x777))+new_r01);
evalcond[8]=((((-1.0)*x766*x767))+((x765*x768))+new_r10);
evalcond[9]=(((new_r10*x765))+(((-1.0)*new_r00*x773))+x768);
evalcond[10]=((((-1.0)*new_r01*x773))+x775+x769);
evalcond[11]=((((-1.0)*x768*x773))+(((-1.0)*x765*x767))+new_r00);
evalcond[12]=(((new_r20*sj7))+(((-1.0)*cj7*new_r00*x773))+((new_r10*x772)));
evalcond[13]=((((-1.0)*cj7*new_r01*x773))+((new_r11*x772))+((new_r21*sj7)));
evalcond[14]=(((cj7*new_r22))+((sj7*x771))+(((-1.0)*x770*x774)));
evalcond[15]=((1.0)+(((-1.0)*cj7*x771))+((new_r12*x772))+((new_r22*sj7)));
evalcond[16]=((((-1.0)*sj8))+((cj7*new_r20))+((new_r00*x777))+(((-1.0)*new_r10*x765*x770)));
evalcond[17]=((((-1.0)*x767))+((cj7*new_r21))+((new_r01*x777))+(((-1.0)*x770*x775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "4739e42df21f0d56b64e1a9c91146cd7"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
